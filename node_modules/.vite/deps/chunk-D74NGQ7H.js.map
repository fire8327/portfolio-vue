{
  "version": 3,
  "sources": ["../../@formkit/i18n/dist/index.mjs"],
  "sourcesContent": ["import { has } from '@formkit/utils';\r\n\r\n/**\r\n * Given a string, convert it to sentence case.\r\n *\r\n * @param str - The string to sentence case.\r\n *\r\n * @returns `string`\r\n *\r\n * @public\r\n */\r\nfunction sentence(str) {\r\n    return str[0].toUpperCase() + str.substr(1);\r\n}\r\n/**\r\n * Creates an oxford-comma separated list of items.\r\n *\r\n * @param items - the items to list out.\r\n * @param conjunction - in the list \"x, y, and z\", \"and\" is the conjunction.\r\n * Defaults to \"or\".\r\n *\r\n * @returns `string`\r\n *\r\n * @public\r\n */\r\nfunction list(items, conjunction = 'or') {\r\n    return items.reduce((oxford, item, index) => {\r\n        oxford += item;\r\n        if (index <= items.length - 2 && items.length > 2) {\r\n            oxford += ', ';\r\n        }\r\n        if (index === items.length - 2) {\r\n            oxford += `${items.length === 2 ? ' ' : ''}${conjunction} `;\r\n        }\r\n        return oxford;\r\n    }, '');\r\n}\r\n/**\r\n * Given a string or a date, return a nice human-readable version.\r\n *\r\n * @param date - A string or a date.\r\n *\r\n * @returns `string`\r\n *\r\n * @public\r\n */\r\nfunction date(date) {\r\n    const dateTime = typeof date === 'string' ? new Date(Date.parse(date)) : date;\r\n    if (!(dateTime instanceof Date)) {\r\n        return '(unknown)';\r\n    }\r\n    return new Intl.DateTimeFormat(undefined, {\r\n        dateStyle: 'medium',\r\n        timeZone: 'UTC'\r\n    }).format(dateTime);\r\n}\r\n/**\r\n * Orders two variables from smallest to largest.\r\n *\r\n * @param first - The first number or string.\r\n * @param second - The second number or string.\r\n *\r\n * @returns `[smaller: number | string, larger: number | string]`\r\n *\r\n * @public\r\n */\r\nfunction order(first, second) {\r\n    return Number(first) >= Number(second) ? [second, first] : [first, second];\r\n}\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$C = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'إضافة',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'إزالة',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'إزالة الكل',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'عذرا، لم يتم تعبئة جميع الحقول بشكل صحيح.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'إرسال',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'لا يوجد ملف مختار',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'تحرك لأعلى',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'انتقل لأسفل',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'يتم الآن التحميل...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'تحميل المزيد',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'التالي',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'السابق',\r\n    /**\r\n     * Shown when transferring items between lists.\r\n     */\r\n    addAllValues: 'أضف جميع القيم',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'إضافة قيم محددة',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'قم بإزالة جميع القيم',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'إزالة القيم المحددة',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'اختر التاريخ',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'تاريخ التغيير',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'التاريخ المحدد غير صالح.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$C = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `الرجاء قبول ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `يجب أن يكون ${sentence(name)} بعد ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `يجب أن يكون ${sentence(name)} في المستقبل.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `يمكن أن يحتوي ${sentence(name)} على أحرف أبجدية فقط.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `يمكن أن يحتوي ${sentence(name)} على أحرف وأرقام فقط.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `يمكن أن تحتوي ${sentence(name)} على أحرف ومسافات فقط.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `يجب أن يكون ${sentence(name)} قبل ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `يجب أن يكون ${sentence(name)} في الماضي.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `تمت تهيئة هذا الحقل بشكل غير صحيح ولا يمكن إرساله.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `يجب أن يكون ${sentence(name)} ما بين ${a} و ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} غير متطابق.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} ليس تاريخًا صالحًا ، يرجى استخدام التنسيق ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'تمت تهيئة هذا الحقل بشكل غير صحيح ولا يمكن إرساله';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `يجب أن يكون ${sentence(name)} بين ${date(args[0])} و ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'الرجاء أدخال بريد إليكتروني صالح.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `لا ينتهي ${sentence(name)} بـ ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} ليست قيمة مسموح بها.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `يجب أن يكون ${sentence(name)} حرفًا واحدًا على الأقل.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `يجب أن يكون ${sentence(name)} أقل من أو يساوي ${max} حرفًا.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `يجب أن يتكون ${sentence(name)} من الأحرف ${max}.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `يجب أن يكون ${sentence(name)} أكبر من أو يساوي ${min} حرفًا.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `يجب أن يكون ${sentence(name)} بين ${min} و ${max} حرفًا.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} ليست قيمة مسموح بها.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `لا يمكن أن يكون أكثر من ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `يجب أن يكون ${sentence(name)} أقل من أو يساوي ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'لا يسمح بتنسيقات الملفات.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `يجب أن يكون ${sentence(name)} من النوع: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `لا يمكن أن يكون أقل من ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `يجب أن يكون ${sentence(name)} على الأقل ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” ليس ${name} مسموحًا به.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} يجب ان يكون رقماً`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} مطلوب.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `لا يبدأ ${sentence(name)} بـ ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `يرجى إدخال عنوان URL صالح.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar ar = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$C,\r\n    validation: validation$C\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$B = {\r\n    /**\r\n     * Shown on a button for adding additional items.\r\n     */\r\n    add: 'əlavə edin',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'çıxarmaq',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Hamısını silin',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Üzr istəyirik, bütün sahələr düzgün doldurulmayıb.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Təqdim et',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Heç bir fayl seçilməyib',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'yuxarı hərəkət',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Aşağı hərəkət',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Yükləmə...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Daha çox yüklə',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Növbəti',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Əvvəlki',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Bütün dəyərləri əlavə edin',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Seçilmiş dəyərləri əlavə edin',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Bütün dəyərləri sil',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Seçilmiş dəyərləri sil',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Tarixi seçin',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Tarixi dəyişdirin',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Seçilmiş tarix etibarsızdır.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$B = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `${name} qəbul edin.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} ${date(args[0])} sonra olmalıdır.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} gələcəkdə olmalıdır.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} yalnız əlifba sırası simvollarından ibarət ola bilər.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} yalnız hərf və rəqəmlərdən ibarət ola bilər.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} yalnız hərflərdən və boşluqlardan ibarət ola bilər.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} ${date(args[0])} əvvəl olmalıdır.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} keçmişdə olmalıdır.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Bu sahə səhv konfiqurasiya edilib və onu təqdim etmək mümkün deyil.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} ${a} və ${b} arasında olmalıdır.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} uyğun gəlmir.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} etibarlı tarix deyil, ${args[0]} formatından istifadə edin`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Bu sahə səhv konfiqurasiya edilib və onu təqdim etmək mümkün deyil';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} ${date(args[0])} və ${date(args[1])} arasında olmalıdır`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Etibarlı e-poçt ünvanı daxil edin.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} ${list(args)} ilə bitmir.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} icazə verilən dəyər deyil.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} ən azı bir simvol olmalıdır.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} ${max} simvoldan kiçik və ya ona bərabər olmalıdır.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} ${max} simvol uzunluğunda olmalıdır.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} ${min} simvoldan böyük və ya ona bərabər olmalıdır.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} ${min} və ${max} simvol arasında olmalıdır.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} icazə verilən dəyər deyil.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `${args[0]} ${name}-dən çox ola bilməz.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} ${args[0]} dəyərindən kiçik və ya ona bərabər olmalıdır.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Fayl formatlarına icazə verilmir.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} aşağıdakı tipdə olmalıdır: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `${args[0]} ${name}-dən az ola bilməz.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} ən azı ${args[0]} olmalıdır.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” icazə verilən ${name} deyil.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} rəqəm olmalıdır.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} tələb olunur.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} ${list(args)} ilə başlamır.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Xahiş edirik, düzgün URL daxil edin.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar az = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$B,\r\n    validation: validation$B\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$A = {\r\n    /**\r\n     * Shown on a button for adding additional items.\r\n     */\r\n    add: 'Добави',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Премахни',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Премахни всички',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Извинете, не всички полета са попълнени правилно.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Изпрати',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Няма избран файл',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Преместване нагоре',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Преместете се надолу',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Зареждане...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Заредете повече',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Следващ',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Предишен',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Добавете всички стойности',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Добавяне на избрани стойности',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Премахнете всички стойности',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Премахване на избраните стойности',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Избери дата',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Промяна на датата',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Избраната дата е невалидна.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$A = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Моля приемете ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} трябва да е след ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} трябва да бъде в бъдещето.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} може да съдържа само букви.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} може да съдържа само букви и цифри.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} може да съдържа само букви и интервали.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} трябва да е преди ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} трябва да бъде в миналото.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Това поле е конфигурирано неправилно и не може да бъде изпратено`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} трябва да бъде между ${a} и ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} не съвпада.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} е невалидна дата. Моля, използвайте формата ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Това поле е конфигурирано неправилно и не може да бъде изпратено';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} трябва да бъде между ${date(args[0])} и ${date(args[1])}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Моля, въведете валиден имейл адрес.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} не завършва на ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} е неразрешена стойност.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} трябва да има поне един символ.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} трябва да бъде по-малко или равно на ${max} символа.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} трябва да бъде ${max} символи дълго.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} трябва да бъде по-голямо или равно на ${min} символа.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} трябва да бъде между ${min} и ${max} символа.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} е неразрешена стойност.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Не може да има повече от ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} трябва да бъде по-малко или равно на ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Не са разрешени никакви файлови формати.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} трябва да бъде от тип: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Не може да има по-малко от ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} трябва да бъде поне ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” е неразрешен ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} трябва да бъде число.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} е задължително.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} не започва с ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Моля, въведете валиден URL адрес.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar bg = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$A,\r\n    validation: validation$A\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$z = {\r\n    /**\r\n     * Shown on a button for adding additional items.\r\n     */\r\n    add: 'Afegir',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Eliminar',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Eliminar tot',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Disculpi, no tots els camps estan omplerts correctament.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Enviar',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Cap fitxer triat',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Moure amunt',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Moure avall',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Carregant...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Carregar més',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Següent',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Anterior',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Afegir tots els valors',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Afegeix els valors seleccionats',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Eliminar tots els valors',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Elimina els valors seleccionats',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Trieu la data',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Canviar data',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'La data seleccionada no és vàlida.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$z = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://docs.formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Si us plau accepti ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://docs.formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} ha de ser posterior a ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} ha de succeïr al futur.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} només pot contenir caràcters alfabètics.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://docs.formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} només pot contenir lletres i números.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://docs.formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} només pot contenir lletres i espais.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://docs.formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} ha de ser anterior a ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} ha d'estar al passat.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://docs.formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Aquest camp està configurat incorrectament i no pot ésser enviat.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} ha d'estar entre ${a} i ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://docs.formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} no concorda.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://docs.formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} no és una data vàlida, si us plau empri el format ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Aquest camp està configurat incorrectament i no pot ésser enviat';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://docs.formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} ha d'estar entre ${date(args[0])} i ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://docs.formkit.com/essentials/validation#email}\r\n     */\r\n    email: `Si us plau, entri una adreça d'e-mail vàlida.`,\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://docs.formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} no acaba amb ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://docs.formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} no és un valor acceptat.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://docs.formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} ha de tenir com a mínim un caràcter.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} ha de ser inferior o igual a ${max} caràcters.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} ha de tenir una longitud de ${max} caràcters.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} ha de ser major que o igual a ${min} caràcters.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} ha d'estar entre ${min} i ${max} caràcters.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://docs.formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} no és un valor permès.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://docs.formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `No pot tenir més de ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} ha de ser menys que o igual a ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://docs.formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'No hi ha cap format de fitxer acceptat.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} ha de ser del tipus: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://docs.formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `No pot tenir menys de ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} ha de ser com a mínim ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://docs.formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” no s'accepta com a ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://docs.formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} ha de ser un número.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://docs.formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} és obligatori.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://docs.formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} no comença amb ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://docs.formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Si us plau inclogui una url vàlida.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar ca = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$z,\r\n    validation: validation$z\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$y = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Přidat',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Odebrat',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Odebrat vše',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Pardon, ale ne všechna pole jsou vyplněna správně.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Odeslat',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Žádný soubor nebyl vybrán',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Pohyb nahoru',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Posunout dolů',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Načítání...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Načíst více',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Další',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Předchozí',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Přidat všechny hodnoty',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Přidání vybraných hodnot',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Odstraňte všechny hodnoty',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Odstranění vybraných hodnot',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Zvolte datum',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Změnit datum',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Vybrané datum je neplatné.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$y = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Prosím, zaškrtněte ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} musí být po ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} musí být v budoucnosti.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} může obsahovat pouze písmena.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} může obsahovat pouze písmena a čísla.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} musí být před ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} musí být v minulosti.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Toto pole bylo špatně nakonfigurováno a nemůže být odesláno.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} musí být mezi ${a} a ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} nejsou shodná.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} není platné datum, prosím, použijte formát ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Toto pole bylo špatně nakonfigurováno a nemůže být odesláno.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} musí být mezi ${date(args[0])} a ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Prosím, zadejte platnou e-mailovou adresu.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} nekončí na ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} není povolená hodnota.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} musí mít nejméně jeden znak.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} může mít maximálně ${max} znaků.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} by mělo být ${max} znaků dlouhé.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} musí obsahovat minimálně ${min} znaků.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} musí být dlouhé ${min} až ${max} znaků.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} není povolená hodnota.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Nelze použít více než ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} musí mít menší nebo rovno než ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Nejsou nakonfigurovány povolené typy souborů.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} musí být typu: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Nelze mít méně než ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} musí být minimálně ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” není dovolená hodnota pro ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} musí být číslo.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} je povinné.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} nezačíná na ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Zadejte prosím platnou adresu URL.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar cs = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$y,\r\n    validation: validation$y\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$x = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Tilføj',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Fjern',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Fjern alle',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Alle felter er ikke korrekt udfyldt.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Send',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Ingen filer valgt',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Flyt op',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Flyt ned',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Indlæser...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Indlæs mere',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Næste',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Forrige',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Tilføj alle værdier',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Tilføj valgte værdier',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Fjern alle værdier',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Fjern valgte værdier',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Vælg dato',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Skift dato',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Den valgte dato er ugyldig.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$x = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Accepter venligst ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} skal være senere end ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} skal være i fremtiden.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} kan kun indeholde bogstaver.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} kan kun indeholde bogstaver og tal.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} kan kun indeholde bogstaver og mellemrum.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} skal være før ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} skal være før i dag.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Dette felt er ikke konfigureret korrekt og kan derfor ikke blive sendt.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} skal være mellem ${a} og ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} matcher ikke.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} er ikke gyldig, brug venligst formatet ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Dette felt er ikke konfigureret korrekt og kan derfor ikke blive sendt.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} skal være mellem ${date(args[0])} og ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Indtast venligst en gyldig email-adresse.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} slutter ikke med ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} er ikke en gyldig værdi.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} skal være på mindst ét tegn.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} skal være på højst ${max} tegn.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} skal være ${max} tegn lange.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} skal være på mindst ${min} tegn.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} skal være på mindst ${min} og højst ${max} tegn.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} er ikke en gyldig værdi.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Kan ikke have flere end ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} skal være mindre eller lig med ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Ingen filformater tilladt.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} skal være af filtypen: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Kan ikke have mindre end ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} skal være mindst ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” er ikke en tilladt ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} skal være et tal.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} er påkrævet.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} starter ikke med ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Indtast en gyldig URL.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar da = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$x,\r\n    validation: validation$x\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$w = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Hinzufügen',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Entfernen',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Alles entfernen',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Entschuldigung, nicht alle Felder wurden korrekt ausgefüllt.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Senden',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Keine Datei ausgewählt',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Gehe nach oben',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Gehen Sie nach unten',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Wird geladen...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Mehr laden',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Weiter',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Voriges',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Alle Werte hinzufügen',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Ausgewählte Werte hinzufügen',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Alle Werte entfernen',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Ausgewählte Werte entfernen',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Datum wählen',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Datum ändern',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Das gewählte Datum ist ungültig.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$w = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Bitte ${name} akzeptieren.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} muss nach dem ${date(args[0])} liegen.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} muss in der Zukunft liegen.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} darf nur Buchstaben enthalten.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} darf nur Buchstaben und Zahlen enthalten.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} dürfen nur Buchstaben und Leerzeichen enthalten.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} muss vor dem ${date(args[0])} liegen.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} muss in der Vergangenheit liegen.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Dieses Feld wurde falsch konfiguriert und kann nicht übermittelt werden.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} muss zwischen ${args[0]} und ${args[1]} sein.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} stimmt nicht überein.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} ist kein gültiges Datum im Format ${args[0]}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Dieses Feld wurde falsch konfiguriert und kann nicht übermittelt werden.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} muss zwischen ${date(args[0])} und ${date(args[1])} liegen.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'E-Mail Adresse ist ungültig.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} endet nicht mit ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} enthält einen ungültigen Wert.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = first <= second ? first : second;\r\n        const max = second >= first ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} muss mindestens ein Zeichen enthalten.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} darf maximal ${max} Zeichen enthalten.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} sollte ${max} Zeichen lang sein.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} muss mindestens ${min} Zeichen enthalten.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} muss zwischen ${min} und ${max} Zeichen enthalten.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} enthält einen ungültigen Wert.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Darf maximal ${args[0]} ${name} haben.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} darf maximal ${args[0]} sein.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Keine Dateiformate konfiguriert.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} muss vom Typ ${args[0]} sein.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Mindestens ${args[0]} ${name} erforderlich.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} muss mindestens ${args[0]} sein.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” ist kein gültiger Wert für ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} muss eine Zahl sein.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} ist erforderlich.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} beginnt nicht mit ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Bitte geben Sie eine gültige URL ein.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar de = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$w,\r\n    validation: validation$w\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$v = {\r\n    /**\r\n     * Shown on a button for adding additional items.\r\n     */\r\n    add: 'Προσθήκη',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Αφαίρεση',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Αφαίρεση όλων',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Λυπούμαστε, υπάρχουν πεδία που δεν έχουν συμπληρωθεί σωστά.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Υποβολή',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Κανένα αρχείο δεν έχει επιλεγεί',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Προς τα επάνω',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Προς τα κάτω',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Φορτώνει...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Φόρτωση περισσότερων',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Επόμενη',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Προηγούμενο',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Προσθήκη όλων των τιμών',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Προσθήκη επιλεγμένων τιμών',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Κατάργηση όλων των τιμών',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Αφαίρεση επιλεγμένων τιμών',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Επιλέξτε ημερομηνία',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Αλλαγή ημερομηνίας',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Η επιλεγμένη ημερομηνία δεν είναι έγκυρη.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$v = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Παρακαλώ αποδεχτείτε το ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} πρέπει να είναι μετά της ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} πρέπει να είναι στο μέλλον.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} μπορεί να περιέχει μόνο αλφαβητικούς χαρακτήρες.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} μπορεί να περιέχει μόνο γράμματα και αριθμούς.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} μπορεί να περιέχει μόνο γράμματα και κενά.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} πρέπει να είναι πριν της ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} πρέπει να είναι στο παρελθόν.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Αυτό το πεδίο έχει ρυθμιστεί λανθασμένα και δεν μπορεί να υποβληθεί.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} πρέπει να είναι μεταξύ ${a} και ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} δεν ταιριάζει.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} δεν είναι έγυρη ημερομηνία, παρακαλώ ακολουθήστε την διαμόρφωση ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Αυτό το πεδίο έχει ρυθμιστεί λανθασμένα και δεν μπορεί να υποβληθεί';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} πρέπει να είναι μεταξύ ${date(args[0])} και ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Παρακαλώ πληκτρολογήστε μια έγκυρη email διεύθυνση. ',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} δεν καταλήγει με ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} δεν είναι μια επιτρεπτή τιμή.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} πρέπει να είναι τουλάχιστον ενός χαρακτήρα.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} πρέπει να είναι λιγότεροι ή ίσοι με ${max} χαρακτήρες.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `Το ${sentence(name)} θα πρέπει να έχει μήκος ${max} χαρακτήρες.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} πρέπει να είναι περισσότεροι ή ίσοι με ${min} χαρακτήρες.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} πρέπει να είναι μεταξύ ${min} και ${max} χαρακτήρες.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} δεν είναι μια επιτρεπτή τιμή.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Δεν μπορεί να έχει παραπάνω από ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} πρέπει αν είναι λιγότερο ή ίσο με το ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Δεν επιτρέπονται αρχεία.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} πρέπει να είναι τύπου: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Δεν μπορεί να είναι λιγότερο από ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} πρέπει να είναι τουλάχιστον ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” δεν είναι μια επιτρεπτή ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} πρέπει να είναι αριθμός.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} είναι υποχρεωτικό.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} δεν αρχίζει με ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Παρακαλώ εισάγετε ένα έγκυρο URL.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar el = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$v,\r\n    validation: validation$v\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$u = {\r\n    /**\r\n     * Shown on a button for adding additional items.\r\n     */\r\n    add: 'Add',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Remove',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Remove all',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Sorry, not all fields are filled out correctly.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Submit',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'No file chosen',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Move up',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Move down',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Loading...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Load more',\r\n    /**\r\n     * Show on buttons that navigate state forward\r\n     */\r\n    next: 'Next',\r\n    /**\r\n     * Show on buttons that navigate state backward\r\n     */\r\n    prev: 'Previous',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Add all values',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Add selected values',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Remove all values',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Remove selected values',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Choose date',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Change date',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'The selected date is invalid.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$u = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Please accept the ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} must be after ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} must be in the future.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} can only contain alphabetical characters.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} can only contain letters and numbers.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} can only contain letters and spaces.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} must be before ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} must be in the past.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `This field was configured incorrectly and can’t be submitted.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} must be between ${a} and ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} does not match.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} is not a valid date, please use the format ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'This field was configured incorrectly and can’t be submitted';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} must be between ${date(args[0])} and ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Please enter a valid email address.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} doesn’t end with ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} is not an allowed value.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} must be at least one character.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} must be less than or equal to ${max} characters.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} should be ${max} characters long.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} must be greater than or equal to ${min} characters.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} must be between ${min} and ${max} characters.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} is not an allowed value.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Cannot have more than ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} must be less than or equal to ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'No file formats allowed.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} must be of the type: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Cannot have fewer than ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `Must be at least ${args[0]} ${name} .`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” is not an allowed ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} must be a number.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} is required.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} doesn’t start with ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Please enter a valid URL.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar en = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$u,\r\n    validation: validation$u\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$t = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Añadir',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Quitar',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Quitar todos',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Discúlpe, los campos no fueron completados correctamente.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Enviar',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Archivo no seleccionado',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Moverse hacia arriba',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Moverse hacia abajo',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Cargando...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Cargar más',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Próximo',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Anterior',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Añadir todos los valores',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Añadir valores seleccionados',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Eliminar todos los valores',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Eliminar los valores seleccionados',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Elige fecha',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Cambiar fecha',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'La fecha seleccionada no es válida.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$t = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Acepte el ${name} por favor.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} debe ser posterior a ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} debe ser una fecha futura.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} debe contener solo caractéres alfabéticos.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} debe ser alfanumérico.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} espacios alfa solo pueden contener letras y espacios.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} debe ser anterior a ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} debe ser una fecha pasada.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `El campo no fue completado correctamente y no puede ser enviado.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} debe estar entre ${a} y ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} no coincide.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} no es una fecha válida, por favor utilice el formato ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'El campo no fue completado correctamente y no puede ser enviado.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} debe estar entre ${date(args[0])} y ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Ingrese una dirección de correo electrónico válida por favor.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} no termina con ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} no es un valor permitido.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} debe tener al menos una letra.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} debe tener como máximo ${max} caractéres.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} debe tener ${max} caracteres.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} debe tener como mínimo ${min} caractéres.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} debe tener entre ${min} y ${max} caractéres.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} no es un valor permitido.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `No puede tener más de ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} debe ser menor o igual a ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'No existen formatos de archivos permitidos.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} debe ser del tipo: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `No puede tener menos de ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} debe ser de al menos ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” no es un valor permitido de ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} debe ser un número.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} es requerido.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} debe comenzar con ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Introduce una URL válida.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar es = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$t,\r\n    validation: validation$t\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$s = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'افزودن',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'حذف',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'همه را حذف کنید',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'همه فیلدها به‌درستی پر نشده‌اند',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'ثبت',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'هیچ فایلی انتخاب نشده است',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'حرکت به بالا',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'حرکت به پایین',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'در حال بارگذاری...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'بارگذاری بیشتر',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'بعدی',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'قبلی',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'تمام مقادیر را اضافه کنید',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'مقادیر انتخاب شده را اضافه کنید',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'تمام مقادیر را حذف کنید',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'حذف مقادیر انتخاب شده',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'تاریخ را انتخاب کنید',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'تغییر تاریخ',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'تاریخ انتخاب شده نامعتبر است',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$s = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `لطفاً ${name} را بپذیرید.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} باید بعد از تاریخ ${date(args[0])} باشد.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} باید مربوط به آینده باشد.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} فقط میتواند شامل حروف الفبا باشد.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} فقط میتواند شامل حروف و اعداد باشد.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} فقط می تواند شامل حروف و فاصله باشد.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} باید قبل از تاریخ ${date(args[0])} باشد.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} باید مربوط به گذشته باشد.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `این فیلد به اشتباه پیکربندی شده است و قابل ارسال نیست`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} باید بین ${args[0]} و ${args[1]} باشد.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} مطابقت ندارد.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} تاریخ معتبری نیست، لطفاً از قالب ${args[0]} استفاده کنید\r\n`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'این فیلد به اشتباه پیکربندی شده است و قابل ارسال نیست';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} باید بین ${date(args[0])} و ${date(args[1])} باشد.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'لطفا آدرس ایمیل معتبر وارد کنید.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} باید به ${list(args)} ختم شود.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} مجاز نیست.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = first <= second ? first : second;\r\n        const max = second >= first ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} باید حداقل یک کاراکتر باشد.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} باید کمتر یا برابر با ${max} کاراکتر باشد.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} باید ${max} کاراکتر طولانی باشد.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} باید بزرگتر یا برابر با ${min} کاراکتر باشد.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} باید بین ${min} و ${max} کاراکتر باشد.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} مجاز نیست.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `${name} نمی تواند بیش از ${args[0]} باشد.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} باید کمتر یا برابر با ${args[0]} باشد.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'فرمت فایل مجاز نیست.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} باید از این نوع باشد: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `${name} نمی تواند کمتر از ${args[0]} باشد.\r\n`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} باید حداقل ${args[0]} باشد.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `\"${value}\" یک ${name} مجاز نیست.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} باید عدد باشد.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `پر کردن ${sentence(name)} اجباری است.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} باید با ${list(args)} شروع شود.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `لطفا یک URL معتبر وارد کنید.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar fa = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$s,\r\n    validation: validation$s\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$r = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Lisää',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Poista',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Poista kaikki',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Kaikkia kenttiä ei ole täytetty oikein.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Tallenna',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Ei valittuja tiedostoja',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Siirrä ylös',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Siirrä alas',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Ladataan...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Lataa lisää',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Seuraava',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Edellinen',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Lisää kaikki arvot',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Lisää valitut arvot',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Poista kaikki arvot',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Poista valitut arvot',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Valitse päivämäärä',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Vaihda päivämäärä',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Valittu päivämäärä on virheellinen.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$r = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Ole hyvä ja hyväksy ${name}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} tulee olla ${date(args[0])} jälkeen.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} on oltava tulevaisuudessa.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} saa sisältää vain kirjaimia.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} saa sisältää vain kirjaimia ja numeroita.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} voivat sisältää vain kirjaimia ja välilyöntejä.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} tulee olla ennen: ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} on oltava menneisyydessä.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Tämä kenttä on täytetty virheellisesti joten sitä ei voitu lähettää.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} on oltava välillä ${a} - ${b} `;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} ei täsmää.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} ei ole validi päivämäärä, ole hyvä ja syötä muodossa: ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Tämä kenttä on täytetty virheellisesti joten sitä ei voitu lähettää.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} on oltava välillä ${date(args[0])} - ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Syötä validi sähköpostiosoite.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} tulee päättyä ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} ei ole sallittu vaihtoehto.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} on oltava vähintään yksi merkki.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} on oltava ${max} tai alle merkkiä.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} pitäisi olla ${max} merkkiä pitkä.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} on oltava vähintään ${min} merkkiä.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} on oltava vähintään ${min}, enintään ${max} merkkiä.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} ei ole sallittu arvo.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Valitse enintään ${args[0]} ${name} vaihtoehtoa.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} on oltava ${args[0]} tai alle.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Tiedostoja ei sallita.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} tulee olla ${args[0]}-tiedostotyyppiä.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Valitse vähintään ${args[0]} ${name} vaihtoehtoa.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} tulee olla ${args[0]} tai suurempi.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” ei ole sallittu ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `Kentän ${sentence(name)} tulee olla numero.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} vaaditaan.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} on alettava ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Anna kelvollinen URL-osoite.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar fi = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$r,\r\n    validation: validation$r\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$q = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Ajouter',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Supprimer',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Enlever tout',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Désolé, tous les champs ne sont pas remplis correctement.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Valider',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Aucun fichier choisi',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Déplacez-vous',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Déplacez-vous',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Chargement...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Chargez plus',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Suivant',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Précédent',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Ajouter toutes les valeurs',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Ajouter les valeurs sélectionnées',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Supprimer toutes les valeurs',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Supprimer les valeurs sélectionnées',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Choisissez la date',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Modifier la date',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: `La date sélectionnée n'est pas valide.`,\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$q = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Veuillez accepter le ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} doit être postérieure au ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} doit être dans le futur.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} ne peut contenir que des caractères alphabétiques.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} ne peut contenir que des lettres et des chiffres.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} ne peuvent contenir que des lettres et des espaces.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} doit être antérieure au ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} doit être dans le passé.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Ce champ a été configuré de manière incorrecte et ne peut pas être soumis.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} doit être comprise entre ${a} et ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} ne correspond pas.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} n'est pas une date valide, veuillez utiliser le format ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Ce champ a été configuré de manière incorrecte et ne peut pas être soumis.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} doit être comprise entre ${date(args[0])} et ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Veuillez saisir une adresse email valide.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} ne se termine pas par ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} n'est pas une valeur autorisée.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} doit comporter au moins un caractère.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} doit être inférieur ou égal à ${max} caractères.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} doit contenir ${max} caractères.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} doit être supérieur ou égal à ${min} caractères.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} doit être comprise entre ${min} et ${max} caractères.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} n'est pas une valeur autorisée.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Ne peut pas avoir plus de ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} doit être inférieur ou égal à ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Aucun format de fichier n’est autorisé';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} doit être du type: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Ne peut pas avoir moins de ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} doit être au moins de ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” n'est pas un ${name} autorisé.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} doit être un nombre.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} est requis.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} ne commence pas par ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Entrez une URL valide.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar fr = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$q,\r\n    validation: validation$q\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$p = {\r\n    /**\r\n     * Shown on a button for adding additional items.\r\n     */\r\n    add: 'Foeg ta',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Ferwider',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Ferwider alles',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Sorry, net alle fjilden binne korrekt ynfolle.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Ferstjoere',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Gjin bestân keazen',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Gean omheech',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Nei ûnderen',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Lade…',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Mear lade',\r\n    /**\r\n     * Show on buttons that navigate state forward\r\n     */\r\n    next: 'Folgende',\r\n    /**\r\n     * Show on buttons that navigate state backward\r\n     */\r\n    prev: 'Foarige',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Foegje alle wearden ta',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Foegje selektearre wearden ta',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Fuortsmite alle wearden',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Fuortsmite selektearre wearden',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Kies datum',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Feroarje datum',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'De selektearre datum is ûnjildich.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$p = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Akseptearje de ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} moat nei ${date(args[0])} wêze.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} moat yn de takomst lizze.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} mei allinne alfabetyske tekens befetsje.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} mei allinne letters en sifers befetsje.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} mei allinne letters en spaasjes befetsje.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} moat foar ${date(args[0])} falle.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} moat yn it ferline wêze.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Dit fjild is ferkeard konfigurearre en kin net ferstjoerd wurde.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} moat tusken ${a} en ${b} lizze.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} komt net oerien.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} is gjin jildige datum, brûk de notaasje ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Dit fjild is ferkeard konfigurearre en kin net ferstjoerd wurde';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} moat tusken ${date(args[0])} en ${date(args[1])} lizze`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Folje in jildich e-mailadres yn.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} einiget net mei ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} is gjin tastiene wearde.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} moat minimaal ien teken wêze.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} moat lytser wêze as of gelyk wêze oan ${max} tekens.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} moat ${max} tekens lang wêze.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} moat grutter wêze as of gelyk wêze oan ${min} tekens.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} moat tusken de ${min} en ${max} tekens befetsje.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} is gjin tastiene wearde.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Mei net mear as ${args[0]} ${name} hawwe.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} moat lytser wêze as of gelyk wêze oan ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Gjin bestânsnotaasjes tastien.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} moat fan it type: ${args[0]} wêze`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Mei net minder as ${args[0]} ${name} hawwe.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} moat minimaal ${args[0]} wêze.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `\"${value}\" is gjin tastiene ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} moat in getal wêze.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} is ferplicht.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} begjint net mei ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Doch der in jildige url by.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar fy = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$p,\r\n    validation: validation$p\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$o = {\r\n    /**\r\n     * Shown on a button for adding additional items.\r\n     */\r\n    add: 'הוסף',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'מחק',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'מחק הכל',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'שים לב, לא כל השדות מלאים כראוי.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'שלח',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'לא נבחר קובץ..',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'הזז למעלה',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'הזז למטה',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'טוען...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'טען יותר',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'הבא',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'הקודם',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'הוסף את כל הערכים',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'הוספת ערכים נבחרים',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'הסר את כל הערכים',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'הסר ערכים נבחרים',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'בחר תאריך',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'שינוי תאריך',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'התאריך שנבחר אינו חוקי.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$o = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `אנא אשר את ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} חייב להיות אחרי ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} חייב להיות בעתיד.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} חייב להכיל אותיות אלפבת.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} יכול להכיל רק מספרים ואותיות.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} יכול להכיל רק אותיות ורווחים.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} חייב להיות לפני ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} חייב להיות בעבר`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `שדה זה לא הוגדר כראוי ולא יכול להישלח.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} חייב להיות בין ${a} ו- ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} לא מתאים.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} הוא לא תאריך תקין, אנא השתמש בפורמט ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'שדה זה לא הוגדר כראוי ולא יכול להישלח.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} חייב להיות בין ${date(args[0])} ו- ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'אנא הקלד אימייל תקין.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} לא מסתיים ב- ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} הוא לא ערך מורשה.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} חייב להיות לפחות תו אחד.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} חייב להיות פחות או שווה ל- ${max} תווים.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} צריך להיות ${max} תווים ארוכים.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} חייב להיות גדול או שווה ל- ${min} תווים.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} חייב להיות בין ${min} ו- ${max} תווים.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} הוא לא ערך תקין.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `${name} לא יכול להיות עם יותר מ- ${args[0]}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} חייב להיות פחות או שווה ל- ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'פורמט הקובץ לא מורשה.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} חייב להיות מסוג: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `${name} לא יכול להיות עם פחות מ- ${args[0]}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} חייב להיות לפחות ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” לא מתאים ל- ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} חייב להיות מספר.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} הינו חובה.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} לא מתחיל ב- ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `הזן כתובת URL חוקית.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar he = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$o,\r\n    validation: validation$o\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$n = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Dodaj',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Ukloni',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Pojedina polja nisu ispravno ispunjena.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Predaj',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Pomaknite se gore',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Pomakni se dolje',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Učitavanje...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Učitaj više',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Sljedeći',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'prijašnji',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Dodajte sve vrijednosti',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Dodavanje odabranih vrijednosti',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Ukloni sve vrijednosti',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Ukloni odabrane vrijednosti',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Odaberite datum',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Promijeni datum',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Odabrani datum je nevažeći.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$n = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Potrebno je potvrditi ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} mora biti u periodu poslije ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} mora biti u budućnosti.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} mora sadržavati samo slova.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} mora sadržavati slova i brojeve.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} mogu sadržavati samo slova i razmake..`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} mora biti prije ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} mora biti u prošlosti.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Format sadržaja nije ispravan i ne može biti predan.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} mora biti između ${args[0]} i ${args[1]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} ne odgovara zadanoj vrijednosti.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} nije ispravan format datuma. Molimo koristite sljedeći format: ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Ovo polje nije ispravno postavljeno i ne može biti predano.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} mora biti vrijednost između ${date(args[0])} i ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Molimo upišite ispravnu email adresu.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} ne završava s ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} nije dopuštena vrijednost.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = first <= second ? first : second;\r\n        const max = second >= first ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} mora sadržavati barem jedan znak.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} mora imati ${max} ili manje znakova.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} trebao bi biti dugačak ${max} znakova.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} mora imati barem ${min} znakova.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `Broj znakova za polje ${sentence(name)} mora biti između ${min} i ${max}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} nije dozvoljena vrijednost.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Ne smije imati više od ${args[0]} ${name} polja.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} mora imati vrijednost manju ili jednaku ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Format datoteke nije dozvoljen.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `Format datoteke na polju ${sentence(name)} mora odgovarati: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Broj upisanih vrijednosti na polju ${name} mora biti barem ${args[0]}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} mora biti barem ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” nije dozvoljena vrijednost na polju ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} mora biti broj.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} je obavezno.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} ne počinje s ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Unesite valjanu URL adresu.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar hr = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$n,\r\n    validation: validation$n\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$m = {\r\n    /**\r\n     * Shown on a button for adding additional items.\r\n     */\r\n    add: 'Hozzáadás',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Eltávolítás',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Összes eltávolítása',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Sajnáljuk, nem minden mező lett helyesen kitöltve.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Beküldés',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Nincs fájl kiválasztva',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Mozgás felfelé',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Mozgás lefelé',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Betöltés...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Töltsön be többet',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Következő',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Előző',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Adja hozzá az összes értéket',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Kiválasztott értékek hozzáadása',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Távolítsa el az összes értéket',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'A kiválasztott értékek eltávolítása',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Válassza ki a dátumot',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Dátum módosítása',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'A kiválasztott dátum érvénytelen.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$m = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Fogadja el a ${name} mezőt.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} mezőnek ${date(args[0])} után kell lennie.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} mezőnek a jövőben kell lennie.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} csak alfanumerikus karaktereket tartalmazhat.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} csak betűket és számokat tartalmazhat.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} csak betűket és szóközöket tartalmazhat.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} mezőnek ${date(args[0])} előtt kell lennie.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} mezőnek a múltban kell lennie.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Ez a mező hibásan lett konfigurálva, így nem lehet beküldeni.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `A ${sentence(name)} mezőnek ${a} és ${b} között kell lennie.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} nem egyezik.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} nem érvényes dátum, ${args[0]} formátumot használj`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Ez a mező hibásan lett konfigurálva, így nem lehet beküldeni.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} mezőnek ${date(args[0])} és ${args[1]} között kell lennie`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Kérjük, érvényes email címet adjon meg.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} mező nem a kijelölt (${list(args)}) módon ér véget.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} nem engedélyezett érték.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} mezőnek legalább egy karakteresnek kell lennie.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} mezőnek maximum ${max} karakteresnek kell lennie.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} ${max} karakter hosszúnak kell lennie.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} mezőnek minimum ${min} karakteresnek kell lennie.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} mezőnek ${min} és ${max} karakter között kell lennie.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} nem engedélyezett érték.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Nem lehet több mint ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} nem lehet nagyobb, mint ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Nincsenek támogatott fájlformátumok.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)}-nak/nek a következőnek kell lennie: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Nem lehet kevesebb, mint ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)}-nak/nek minimum ${args[0]}-nak/nek kell lennie.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `\"${value}\" nem engedélyezett ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} mezőnek számnak kell lennie.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} mező kötelező.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} nem a következővel kezdődik: ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Kérjük, adjon meg egy érvényes URL-t.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar hu = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$m,\r\n    validation: validation$m\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$l = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Tambah',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Hapus',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Hapus semua',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Maaf, tidak semua bidang formulir terisi dengan benar',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Kirim',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Tidak ada file yang dipilih',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Pindah ke atas',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Pindah ke bawah',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Memuat...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Muat lebih',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Berikutnya',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Sebelumnya',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Tambahkan semua nilai',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Tambahkan nilai yang dipilih',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Hapus semua nilai',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Hapus nilai yang dipilih',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Pilih tanggal',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Ubah tanggal',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Tanggal yang dipilih tidak valid.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$l = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Tolong terima kolom ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} nilainya harus lebih dari waktu ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} harus berisi waktu di masa depan.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} hanya bisa diisi huruf alfabet.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} hanya bisa diisi huruf dan angka.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} hanya boleh berisi huruf dan spasi..`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} nilainya harus kurang dari waktu ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} harus berisi waktu yang sudah lampau.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Kolom ini tidak diisi dengan benar sehingga tidak bisa dikirim`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} harus bernilai diantara ${a} dan ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} nilainya tidak cocok.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} waktu tidak cocok, mohon gunakan format waktu ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Kolom ini tidak diisi dengan benar sehingga tidak bisa dikirim';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} harus diantara waktu ${date(args[0])} dan waktu ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Tolong tulis alamat email yang benar.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} nilainya tidak berakhiran dengan ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} adalah nilai yang tidak diizinkan.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} nilainya setidaknya berisi satu karakter.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} jumlah karakternya harus kurang dari atau sama dengan ${max} karakter.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} harus ${max} karakter panjang.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} jumlah karakternya harus lebih dari atau sama dengan ${min} karakter.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} jumlah karakternya hanya bisa antara ${min} dan ${max} karakter.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} nilainya tidak diizinkan.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Tidak bisa memiliki lebih dari ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} harus lebih kecil atau sama dengan ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Format file tidak diizinkan';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} hanya bisa bertipe: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Tidak boleh kurang dari ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} setidaknya harus berisi ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” adalah nilai yang tidak diperbolehkan untuk ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} harus berupa angka.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} harus diisi.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} tidak dimulai dengan ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Harap masukkan URL yang valid.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar id = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$l,\r\n    validation: validation$l\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$k = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Inserisci',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Rimuovi',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Rimuovi tutti',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Ci dispiace, non tutti i campi sono compilati correttamente.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Invia',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Nessun file selezionato',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Sposta in alto',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Sposta giù',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Caricamento...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Carica altro',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Prossimo',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Precedente',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Aggiungi tutti i valori',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Aggiungi valori selezionati',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Rimuovi tutti i valori',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Rimuovi i valori selezionati',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Scegli la data',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Cambia data',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'La data selezionata non è valida.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$k = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Si prega di accettare ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `la data ${sentence(name)} deve essere successiva ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `la data ${sentence(name)} deve essere nel futuro.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} può contenere solo caratteri alfanumerici.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} può contenere solo lettere e numeri.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} può contenere solo lettere e spazi.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `la data ${sentence(name)} deve essere antecedente ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} deve essere nel passato.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Questo campo è stato configurato male e non può essere inviato.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} deve essere tra ${a} e ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} non corrisponde.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} non è una data valida, per favore usa il formato ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Questo campo è stato configurato in modo errato e non può essere inviato.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} deve essere tra ${date(args[0])} e ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Per favore inserire un indirizzo email valido.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} non termina con ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} non è un valore consentito.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} deve contenere almeno un carattere.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} deve essere minore o uguale a ${max} caratteri.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} deve contenere ${max} caratteri.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} deve essere maggiore o uguale a ${min} caratteri.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} deve essere tra ${min} e ${max} caratteri.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} non è un valore consentito.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Non può avere più di ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} deve essere minore o uguale a ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Formato file non consentito.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} deve essere di tipo: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Non può avere meno di ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} deve essere almeno ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `\"${value}\" non è un ${name} consentito.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} deve essere un numero.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} è richiesto.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} non inizia con ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Inserisci un URL valido.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar it = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$k,\r\n    validation: validation$k\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$j = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: '追加',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: '削除',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: '全て削除',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: '項目が正しく入力されていません。',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: '送信',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'ファイルが選択されていません',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: '上に移動',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: '下へ移動',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: '読み込み中...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'さらに読み込む',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: '[次へ]',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: '前へ',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'すべての値を追加',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: '選択した値を追加',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'すべての値を削除',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: '選択した値を削除',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: '日付を選択',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: '日付を変更',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: '選択した日付は無効です。',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$j = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `${name}の同意が必要です。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)}は${date(args[0])}より後の日付である必要があります。`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)}は将来の日付でなければなりません。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)}には英字のみを含めることができます。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)}には、文字と数字のみを含めることができます。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)}には、文字とスペースのみを含めることができます。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)}は${date(args[0])}より前の日付である必要があります。`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)}は過去の日付である必要があります。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `このフィールドは正しく構成されていないため、送信できません。`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)}は${a}と${b}の間にある必要があります。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)}が一致しません。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)}は有効な日付ではありません。${args[0]}の形式を使用してください。`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'このフィールドは正しく構成されておらず、送信できません。';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)}は${date(args[0])}と${date(args[1])}の間にある必要があります。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: '有効なメールアドレスを入力してください。',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)}は${list(args)}で終わっていません。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)}は許可された値ではありません。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)}は少なくとも1文字である必要があります。`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)}は${max}文字以下である必要があります。`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} の長さは ${max} 文字でなければなりません。`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)}は${min}文字以上である必要があります。`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)}は${min}から${max}文字の間でなければなりません。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)}は許可された値ではありません。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `${name}は${args[0]}を超えることはできません。`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)}は${args[0]}以下である必要があります。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'ファイル形式は許可されていません。';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)}は${args[0]}である必要があります。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `${name}は${args[0]}未満にすることはできません。`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)}は少なくとも${args[0]}である必要があります。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}”は許可された${name}ではありません。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)}は数値でなければなりません。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)}は必須です。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)}は${list(args)}で始まっていません。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `有効な URL を入力してください。`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar ja = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$j,\r\n    validation: validation$j\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$i = {\r\n    /**\r\n     * Shown on a button for adding additional items.\r\n     */\r\n    add: 'қосу',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Жою',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Барлығын жою',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Кешіріңіз, барлық өрістер дұрыс толтырылмаған.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Жіберу',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Ешбір файл таңдалмады',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Жоғары жылжу',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Төмен жылжытыңыз',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Жүктеу...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Көбірек жүктеңіз',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Келесі',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Алдыңғы',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Барлық мәндерді қосыңыз',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Таңдалған мәндерді қосыңыз',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Барлық мәндерді алып тастаңыз',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Таңдалған мәндерді алып тастаңыз',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Күнді таңдаңыз',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Өзгерту күні',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Таңдалған күн жарамсыз.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$i = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `қабылдаңыз ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} кейін болуы керек ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} болашақта болуы керек.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} тек алфавиттік таңбаларды қамтуы мүмкін.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} тек әріптер мен сандардан тұруы мүмкін.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} тек әріптер мен бос орындар болуы мүмкін.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} бұрын болуы керек ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} өткенде болуы керек.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Бұл өріс қате конфигурацияланған және оны жіберу мүмкін емес.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} арасында болуы керек ${a} және ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} сәйкес келмейді.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} жарамды күн емес, пішімді пайдаланыңыз ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Бұл өріс қате конфигурацияланған және оны жіберу мүмкін емес';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} арасында болуы керек ${date(args[0])} және ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Өтінеміз қолданыстағы электронды пошта адресін енгізіңіз.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} -мен бітпейді ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} рұқсат етілген мән емес.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} кем дегенде бір таңба болуы керек.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} кем немесе тең болуы керек ${max} кейіпкерлер.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} ${max} таңбалары болуы керек.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} артық немесе тең болуы керек ${min} кейіпкерлер.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} арасында болуы керек ${min} және ${max} кейіпкерлер.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} рұқсат етілген мән емес.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `артық болуы мүмкін емес ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} кем немесе тең болуы керек ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Файл пішімдері рұқсат етілмейді.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} типте болуы керек: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `кем болуы мүмкін емес ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} кем дегенде болуы керек ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” рұқсат етілмейді ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} сан болуы керек.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} талап етіледі.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} -ден басталмайды ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Жарамды URL мекенжайын енгізіңіз.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar kk = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$i,\r\n    validation: validation$i\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$h = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: '추가',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: '제거',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: '모두 제거',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: '모든 값을 채워주세요',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: '제출하기',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: '선택된 파일이 없습니다',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: '위로 이동',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: '아래로 이동',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: '로드 중...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: '더 불러오기',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: '다음',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: '이전',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: '모든 값 추가',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: '선택한 값 추가',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: '모든 값 제거',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: '선택한 값 제거',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: '날짜 선택',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: '날짜 변경',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: '선택한 날짜가 잘못되었습니다.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$h = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `${name} 올바른 값을 선택 해주세요`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} ${date(args[0])} 이후여야 합니다`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} 미래의 날짜여야합니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} 알파벳 문자만 포함할 수 있습니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} 문자와 숫자만 포함될 수 있습니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} 문자와 공백만 포함할 수 있습니다.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} ${date(args[0])} 이전여야 합니다`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} 과거의 날짜여야합니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `잘못된 구성으로 제출할 수 없습니다`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} ${a}와 ${b} 사이여야 합니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} 일치하지 않습니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} 유효한 날짜가 아닙니다. ${args[0]}과 같은 형식을 사용해주세요`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return '잘못된 구성으로 제출할 수 없습니다';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} ${date(args[0])}에서 ${date(args[1])} 사이여야 합니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: '올바른 이메일 주소를 입력해주세요',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} ${list(args)}로 끝나지 않습니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} 허용되는 값이 아닙니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} 하나 이상의 문자여야 합니다`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} ${max}자 이하여야 합니다`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} 는 ${max} 자 길이여야 합니다.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} ${min} 문자보다 크거나 같아야 합니다`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} ${min}에서 ${max}자 사이여야 합니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} 허용되는 값이 아닙니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `${args[0]} ${name} 초과할 수 없습니다`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} ${args[0]}보다 작거나 같아야 합니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return '파일 형식이 허용되지 않습니다';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} ${args[0]} 유형이어야 합니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `${args[0]} ${name}보다 작을 수 없습니다`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} ${args[0]} 이상이어야 합니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `${value}\" 허용되지 않는 ${name}입니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} 숫자여야 합니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} 필수 값입니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} ${list(args)}로 시작하지 않습니다`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `유효한 URL을 입력하십시오.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar ko = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$h,\r\n    validation: validation$h\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$g = {\r\n    /**\r\n     * Shown on a button for adding additional items.\r\n     */\r\n    add: 'Legg til',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Fjern',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Fjern alle',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Beklager, noen felter er ikke fylt ut korrekt.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Send inn',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Ingen fil valgt',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Flytt opp',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Flytt ned',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Laster...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Last mer',\r\n    /**\r\n     * Show on buttons that navigate state forward\r\n     */\r\n    next: 'Neste',\r\n    /**\r\n     * Show on buttons that navigate state backward\r\n     */\r\n    prev: 'Forrige',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Legg til alle verdier',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Legg til valgte verdier',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Fjern alle verdier',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Fjern valgte verdier',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Velg dato',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Endre dato',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Den valgte datoen er ugyldig.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$g = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Vennligst aksepter ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} må være senere enn ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} må være i fremtiden.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} kan bare inneholde alfabetiske tegn.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} kan bare inneholde bokstaver og tall.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} kan bare inneholde bokstaver og mellomrom.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} må være tidligere enn ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} må være i fortiden.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Dette feltet er feilkonfigurert og kan ikke innsendes.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} må være mellom ${a} og ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} stemmer ikke overens.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} er ikke en gyldig dato, vennligst bruk formatet ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Dette feltet er feilkonfigurert og kan ikke innsendes.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} må være mellom ${date(args[0])} og ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Vennligst oppgi en gyldig epostadresse.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} slutter ikke med ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} er ikke en tillatt verdi.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} må ha minst ett tegn.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} må ha mindre enn eller nøyaktig ${max} tegn.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} skal være ${max} tegn langt.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} må ha mer enn eller nøyaktig ${min} tegn.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} må ha mellom ${min} og ${max} tegn.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} er ikke en tillatt verdi.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Kan ikke ha mer enn ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} må være mindre enn eller nøyaktig ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Ingen tillatte filformater.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} må være av typen: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Kan ikke ha mindre enn ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} må være minst ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” er ikke en tillatt ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} må være et tall.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} er påkrevd.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} starter ikke med ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Vennligst inkluder en gyldig url.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar nb = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$g,\r\n    validation: validation$g\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$f = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Toevoegen',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Verwijderen',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Alles verwijderen',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Sorry, niet alle velden zijn correct ingevuld.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Versturen',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Geen bestand gekozen',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Naar boven gaan',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Naar beneden verplaatsen',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Aan het laden...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Meer laden',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Vervolgens',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Voorgaand',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Alle waarden toevoegen',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Geselecteerde waarden toevoegen',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Alle waarden verwijderen',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Geselecteerde waarden verwijderen',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Kies een datum',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Datum wijzigen',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'De geselecteerde datum is ongeldig.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$f = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Accepteer de ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} moet na ${date(args[0])} zijn.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} moet in de toekomst liggen.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} mag alleen alfabetische tekens bevatten.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} mag alleen letters en cijfers bevatten.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} mag alleen letters en spaties bevatten.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} moet vóór ${date(args[0])} vallen.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} moet in het verleden liggen.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Dit veld is onjuist geconfigureerd en kan niet worden verzonden.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} moet tussen ${a} en ${b} liggen.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} komt niet overeen.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} is geen geldige datum, gebruik de notatie ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Dit veld is onjuist geconfigureerd en kan niet worden verzonden';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} moet tussen ${date(args[0])} en ${date(args[1])} liggen`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Vul een geldig e-mailadres in.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} eindigt niet met ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} is geen toegestane waarde.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} moet minimaal één teken zijn.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} moet kleiner zijn dan of gelijk zijn aan ${max} tekens.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} moet ${max} tekens lang zijn.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} moet groter zijn dan of gelijk zijn aan ${min} tekens.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} moet tussen de ${min} en ${max} tekens bevatten.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} is geen toegestane waarde.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Mag niet meer dan ${args[0]} ${name} hebben.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} moet kleiner zijn dan of gelijk zijn aan ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Geen bestandsformaten toegestaan.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} moet van het type: ${args[0]} zijn`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Mag niet minder dan ${args[0]} ${name} hebben.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} moet minimaal ${args[0]} zijn.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `\"${value}\" is geen toegestane ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} moet een getal zijn.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} is verplicht.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} begint niet met ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Voer een geldige URL in.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar nl = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$f,\r\n    validation: validation$f\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$e = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Dodaj',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Usuń',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Usuń wszystko',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Nie wszystkie pola zostały wypełnione poprawnie.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Wyślij',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Nie wybrano pliku',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Przesuń w górę',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Przesuń w dół',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Ładowanie...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Załaduj więcej',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Kolejny',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Poprzednia',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Dodaj wszystkie wartości',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Dodaj wybrane wartości',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Usuń wszystkie wartości',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Usuń wybrane wartości',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Wybierz datę',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Zmień datę',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Wybrana data jest nieprawidłowa.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$e = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Proszę zaakceptować ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} musi być po ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} musi być w przyszłości.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `Pole ${sentence(name)} może zawierać tylko znaki alfabetyczne.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `Pole ${sentence(name)} może zawierać tylko znaki alfanumeryczne.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `Pole ${sentence(name)} mogą zawierać tylko litery i spacje.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} musi być przed ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} musi być w przeszłości.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Pole zostało wypełnione niepoprawnie i nie może zostać wysłane.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `Wartość pola ${sentence(name)} musi być pomiędzy ${a} i ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} nie pokrywa się.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `Wartość pola ${sentence(name)} nie jest poprawną datą, proszę użyć formatu ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'To pole zostało wypełnione niepoprawnie i nie może zostać wysłane';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `Data w polu ${sentence(name)} musi być pomiędzy ${date(args[0])} i ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Proszę wpisać poprawny adres email.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `Pole ${sentence(name)} nie kończy się na ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `Pole ${sentence(name)} nie jest dozwoloną wartością.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `Pole ${sentence(name)} musi posiadać minimum jeden znak.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `Pole ${sentence(name)} musi zawierać ${max} lub mniej znaków.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `Pole ${sentence(name)} musi zawierać ${min} lub więcej znaków.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `Pole ${sentence(name)} musi mieć ${min} znaków.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `Pole ${sentence(name)} musi mieć ${min}-${max} znaków.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `Pole ${sentence(name)} zawiera niedozwolone znaki.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Nie można mieć więcej niż ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `Wartość pola ${sentence(name)} musi być mniejsza lub równa ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Nie podano dozwolonych typów plików.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} musi być typem: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Musisz podać więcej niż ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return ` Musisz podać conajmniej ${args[0]} ${sentence(name)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `Wartość pola ${name} jest niedozwolona.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} musi być numerem.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `Pole ${sentence(name)} jest wymagane.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `Wartośc pola ${sentence(name)} nie zaczyna się od ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Wprowadź prawidłowy adres URL.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar pl = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$e,\r\n    validation: validation$e\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$d = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Incluir',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Remover',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Remover todos',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Desculpe, alguns campos não foram preenchidos corretamente.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Enviar',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Nenhum arquivo selecionado.',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Mover para cima',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Mover para baixo',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Carregando...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Carregar mais',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Próximo',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Anterior',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Adicione todos os valores',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Adicionar valores selecionados',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Remover todos os valores',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Remover valores selecionados',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Escolha a data',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Data da alteração',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'A data selecionada é inválida.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$d = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Por favor aceite o ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} precisa ser depois de ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} precisa ser no futuro.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} precisa conter apenas letras.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} pode conter apenas letras e números.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} pode conter apenas números e espaços.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} precisa ser antes de ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} precisa ser no passado.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Este campo não foi configurado corretamente e não pode ser submetido.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} precisa ser entre ${a} e ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} não é igual.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} não é uma data válida, por favor use este formato ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Este campo não foi configurado corretamente e não pode ser submetido.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} precisa ser entre ${date(args[0])} e ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Por favor, insira um endereço de email válido.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} não termina com ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} não é um valor permitido.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = first <= second ? first : second;\r\n        const max = second >= first ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} precisa conter ao menos um caractere.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} precisa ser menor ou igual a ${max} caracteres.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} precisa conter ${max} caracteres.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} precisa ser maior ou igual a ${min} caracteres.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} precisa ter entre ${min} e ${max} caracteres.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} não é um valor permitido.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Não pode ter mais de ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} precisa ser menor ou igual a ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Não há formatos de arquivos permitidos.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} precisa ser do tipo: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Não pode ter menos de ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} precisa ser pelo menos ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” não é um(a) ${name} permitido(a).`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} precisa ser um número.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} é obrigatório.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} não começa com ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Por favor, insira uma url válida.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar pt = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$d,\r\n    validation: validation$d\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$c = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Adăugare',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Elimină',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Elimină tot',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Pare rău, unele câmpuri nu sunt corect completate.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Trimite',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Nu este selectat nici un fișier',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Mutare în sus',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Mutare în jos',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Se încarcă...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Încărcați mai mult',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Urmatorul',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Precedent',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Adăugați toate valorile',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Adăugarea valorilor selectate',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Eliminați toate valorile',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Eliminați valorile selectate',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Alege data',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Modificați data',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Data selectată este nevalidă.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$c = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Te rog acceptă ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} trebuie să fie după ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} trebuie sa fie în viitor.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} poate conține doar caractere alafetice.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} poate conține doar litere și numere.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} poate conține doar litere și spații.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} trebuie să preceadă ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} trebuie să fie în trecut.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Câmpul a fost configurat incorect și nu poate fi trimis.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} trebuie să fie între ${a} și ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} nu se potrivește.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} nu este validă, te rog foloște formatul ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Câmpul a fost incorect configurat și nu poate fi trimis.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} trebuie să fie între ${date(args[0])} și ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Te rog folosește o adresă de email validă.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} nu se termină cu ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} nu este o valoare acceptată.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} trebuie sa conțină cel puțin un caracter.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} trebuie sa aibă cel mult ${max} caractere.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} ar trebui să aibă ${max} caractere lungi.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} trebuie să aibă cel puțin ${min} caractere.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} trebuie să aibă între ${min} și ${max} caractere.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} nu este o valoare acceptată.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Nu poate avea mai mult decat ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} trebuie să fie cel mult egal cu ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Tipul de fișier neacceptat.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} trebuie să fie de tipul: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Nu poate avea mai puțin decât ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} trebuie să fie cel puțin ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” nu este o valoare acceptă pentru ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} trebuie să fie un număr.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} este necesar.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} nu începe cu ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Introduceți o adresă URL validă.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar ro = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$c,\r\n    validation: validation$c\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$b = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Добавить',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Удалить',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Убрать все',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Извините, не все поля заполнены верно.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Отправить',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Файл не выбран',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Переместить вверх',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Переместить вниз',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Загрузка...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Загрузить больше',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Следующий',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Предыдущий',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Добавить все значения',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Добавить выбранные значения',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Удалить все значения',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Удалить выбранные значения',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Выберите дату',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Изменить дату',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Выбранная дата недействительна.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$b = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Пожалуйста, примите ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `Дата ${sentence(name)} должна быть позже ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `Дата ${sentence(name)} должна быть в будущем.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `Поле ${sentence(name)} может содержать только буквы.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `Поле ${sentence(name)} может содержать только буквы и цифры.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} могут содержать только буквы и пробелы.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `Дата ${sentence(name)} должна быть раньше ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `Дата ${sentence(name)} должна быть в прошлом.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Это поле заполнено неверно и не может быть отправлено.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `Поле ${sentence(name)} должно быть между ${a} и ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `Поле ${sentence(name)} не совпадает.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `Поле ${sentence(name)} имеет неверную дату. Пожалуйста, используйте формат ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Это поле заполнено неверно и не может быть отправлено.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `Дата ${sentence(name)} должна быть между ${date(args[0])} и ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Пожалуйста, введите действительный электронный адрес.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `Поле ${sentence(name)} не должно заканчиваться на ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `Поле ${sentence(name)} имеет неподустимое значение.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `Поле ${sentence(name)} должно содержать минимум один символ.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `Длина поля ${sentence(name)} должна быть меньше или равна ${max} символам.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `Длина ${sentence(name)} должна составлять ${max} символов.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `Длина поля ${sentence(name)} должна быть больше или равна ${min} символам.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `Длина поля ${sentence(name)} должна быть между ${min} и ${max} символами.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `Поле ${sentence(name)} имеет недопустимое значение.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Не может быть выбрано больше, чем ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `Поле ${sentence(name)} должно быть меньше или равно ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Не указаны поддержиавемые форматы файла.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `Формат файла в поле ${sentence(name)} должен быть: ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Не может быть выбрано меньше, чем ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `Поле ${sentence(name)} должно быть не менее, чем ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” не поддерживается в поле ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `Поле ${sentence(name)} должно быть числом.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `Поле ${sentence(name)} обязательно для заполнения.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `Поле ${sentence(name)} должно начинаться с ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Пожалуйста, введите действительный URL-адрес.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar ru = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$b,\r\n    validation: validation$b\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$a = {\r\n    /**\r\n     * Shown on a button for adding additional items.\r\n     */\r\n    add: 'Pridať',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Odstrániť',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Odstrániť všetko',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Prepáčte, ale nie všetky polia sú vyplnené správne.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Odoslať',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Nebol vybraný žiadny súbor',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Posunúť hore',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Posunúť dole',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Načítavanie...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Načítať viac',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Ďalšie',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Predošlý',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Pridajte všetky hodnoty',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Pridajte vybrané hodnoty',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Odstrániť všetky hodnoty',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Odstrániť vybrané hodnoty',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Vyberte dátum',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Zmena dátumu',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Vybraný dátum je neplatný.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$a = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Prosím zaškrtnite ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} musí byť za ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} musí byť v budúcnosti.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} môže obsahovať iba písmená.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} môže obsahovať iba písmená a čísla.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} môže obsahovať iba písmená a medzery.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} musí byť pred ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} musí byť v minulosti.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Toto pole bolo nesprávne nakonfigurované a nemôže byť odoslané.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} musí byť medzi ${a} and ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} does not match.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} nie je platným dátumom, prosím, použite formát ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Toto pole bolo nesprávne nakonfigurované a nemôže byť odoslané.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} musí byť medzi ${date(args[0])} a ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Prosím, zadajte platnú emailovú adresu.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} nekončí na ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} nie je povolená hodnota.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} musí mať najmenej jeden znak.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} musí byť menšie alebo rovné ako ${max} znakov.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} by mala mať dĺžku ${max} znakov.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} musí byť väčšie alebo rovné ako ${min} znakov.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} musí byť medzi ${min} až ${max} znakov.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} nie je povolená hodnota.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Nie je možné použiť viac než ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} musí byť menšie alebo rovné ako ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Nie sú povolené formáty súborov.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} musí byť typu: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Nemôže byť menej než ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} musí byť minimálne ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” nie je povolené hodnota pre ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} musí byť číslo.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} je povinné.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} nezačíná s ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Zadajte platnú adresu URL.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar sk = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$a,\r\n    validation: validation$a\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$9 = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Dodaj',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Odstrani',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Odstrani vse',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Nekatera polja niso pravilno izpolnjena.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Pošlji',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Nobena datoteka ni izbrana',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Premakni se navzgor',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Premakni se navzdol',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Nalaganje...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Naloži več',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Naslednji',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Prejšnji',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Dodajte vse vrednosti',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Dodajanje izbranih vrednosti',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Odstranite vse vrednosti',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Odstrani izbrane vrednosti',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Izberite datum',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Spremeni datum',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Izbrani datum je neveljaven.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$9 = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Prosimo popravite ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} mora biti po ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} mora biti v prihodnosti.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} lahko vsebuje samo znake abecede.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} lahko vsebuje samo črke in številke.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} lahko vsebuje samo črke in presledke.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} mora biti pred ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} mora biti v preteklosti.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `To polje je narobe nastavljeno in ne mora biti izpolnjeno.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} mora biti med ${a} in ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} se ne ujema.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} ni pravilen datum, prosimo uporabite format ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'To polje je narobe nastavljeno in ne mora biti izpolnjeno.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} mora biti med ${date(args[0])} in ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Vnesite veljaven e-poštni naslov.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} se mora kočati z ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} ni dovoljena vrednost.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} mora vsebovati vsaj en znak.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} mora vsebovati največ ${max} znakov.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} mora biti dolg ${max} znakov.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} mora vsebovati vsaj ${min} znakov.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} mora vsebovati med ${min} in ${max} znakov.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} ni dovoljena vrednost.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Največ je ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} je lahko največ ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Nobena vrsta datoteke ni dovoljena.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} mora biti tipa: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Najmanj ${args[0]} ${name} je dovoljenih.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} mora biti vsaj ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” ni dovoljen(a/o) ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} mora biti številka.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} je zahtevan(o/a).`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} se mora začeti z ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Vnesite veljaven URL.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar sl = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$9,\r\n    validation: validation$9\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$8 = {\r\n    /**\r\n     * Shown on a button for adding additional items.\r\n     */\r\n    add: 'Dodaj',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Ukloni',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Ukloni sve',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Pojedina polja nisu ispravno ispunjena.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Pošalji',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Fajl nije odabran',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Pomerite se gore',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Pomeri se dole',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Učitavanje...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Učitaj više',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Sledeća',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Prethodna',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Dodajte sve vrednosti',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Dodajte izabrane vrednosti',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Uklonite sve vrednosti',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Uklonite izabrane vrednosti',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Izaberite datum',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Promenite datum',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Izabrani datum je nevažeći.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$8 = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Molimo prihvatite ${name}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} mora biti posle ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} mora biti u budućnosti.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} može da sadrži samo abecedne znakove.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} može da sadrži samo slova i brojeve.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} može da sadrži samo slova i razmake.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} mora biti pre ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} mora biti u prošlosti.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Ovo polje je pogrešno konfigurisano i ne može se poslati.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} mora biti između ${a} i ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} se ne podudara.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} nije važeći datum, molimo Vas koristite format ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Ovo polje je pogrešno konfigurisano i ne može se poslati';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} mora biti između ${date(args[0])} i ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Unesite ispravnu e-mail adresu.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} se ne završava sa ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} nije dozvoljena vrednost`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} mora biti najmanje jedan karakter.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} mora biti manji ili jednaki od ${max} karaktera.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} treba da bude ${max} znakova dugačak.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} mora biti veći ili jednaki od ${min} karaktera.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} mora biti između ${min} i ${max} karaktera.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} nije dozvoljena vrednost.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Ne može imati više od ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} mora biti manji ili jednaki od ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Nisu dozvoljeni formati datoteka.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} mora biti tipa: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Ne može imati manje od ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} mora da ima najmanje ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” nije dozvoljeno ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} mora biti broj.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} je obavezno polje.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} ne počinje sa ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Unesite važeću URL adresu.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar sr = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$8,\r\n    validation: validation$8\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$7 = {\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Ta bort',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Ta bort alla',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Tyvärr är inte alla fält korrekt ifyllda',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Skicka',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Ingen fil vald',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Flytta upp',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Flytta ner',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Laddar...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Ladda mer',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Nästa',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Föregående',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Lägg till alla värden',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Lägg till valda värden',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Ta bort alla värden',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Ta bort valda värden',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Välj datum',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Ändra datum',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Det valda datumet är ogiltigt.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$7 = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Var god acceptera ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} måste vara efter ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} måste vara framåt i tiden.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} kan enbart innehålla bokstäver i alfabetet.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} kan bara innehålla bokstäver och siffror.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} kan bara innehålla bokstäver och blanksteg.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} måste vara före ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} måste vara bakåt i tiden.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Det här fältet ställdes inte in korrekt och kan inte användas.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} måste vara mellan ${a} och ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} matchar inte.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} är inte ett giltigt datum, var god använd formatet ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Det här fältet ställdes inte in korrekt och kan inte användas';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} måste vara mellan ${date(args[0])} och ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Var god fyll i en giltig e-postadress.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} slutar inte med ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} är inte ett godkänt värde.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} måste ha minst ett tecken.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} måste vara ${max} tecken eller färre.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} bör vara ${max} tecken långa.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} måste vara ${min} tecken eller fler.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} måste vara mellan ${min} och ${max} tecken.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} är inte ett godkänt värde.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Kan inte ha mer än ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} måste vara ${args[0]} eller mindre.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Inga filtyper tillåtna.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} måste vara av filtypen: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Kan inte ha mindre än ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} måste vara minst ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” är inte ett godkänt ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} måste vara en siffra.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} är obligatoriskt.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} börjar inte med ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Ange en giltig URL.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar sv = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$7,\r\n    validation: validation$7\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$6 = {\r\n    /**\r\n     * Shown on a button for adding additional items.\r\n     */\r\n    add: 'Илова кардан',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Хориҷ кардан',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Ҳамаро хориҷ кунед',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Бубахшед, на ҳама майдонҳо дуруст пур карда шудаанд.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Пешниҳод кунед',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Ягон файл интихоб нашудааст',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Ба боло ҳаракат кунед',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Ба поён ҳаракат кунед',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Дар ҳоли боргузорӣ',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Бештар бор кунед',\r\n    /**\r\n     * Show on buttons that navigate state forward\r\n     */\r\n    next: 'Баъдӣ',\r\n    /**\r\n     * Show on buttons that navigate state backward\r\n     */\r\n    prev: 'Гузашта',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Ҳама арзишҳоро илова кунед',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Илова кардани арзишҳои интихобшуда',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Ҳама арзишҳоро хориҷ кунед',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Арзишҳои интихобшударо хориҷ кунед',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Сана интихоб кунед',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Тағйир додани сана',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Санаи интихобшуда нодуруст аст.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$6 = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Лутфан ${name}-ро қабул кунед`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} бояд пас аз ${date(args[0])} бошад.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} бояд дар оянда бошад.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} метавонад танҳо аломатҳои алифборо дар бар гирад.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} метавонад танҳо ҳарфҳо ва рақамҳоро дар бар гирад.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} метавонад танҳо ҳарфҳо ва фосилаҳоро дар бар гирад.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} бояд пеш аз ${date(args[0])} бошад.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} бояд дар гузашта бошад.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Ин майдон нодуруст танзим шудааст ва онро пешниҳод кардан ғайриимкон аст.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} бояд дар байни ${a} ва ${b} бошад.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} мувофиқат намекунад.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} санаи дуруст нест, лутфан формати ${args[0]}-ро истифода баред`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Ин майдон нодуруст танзим шудааст ва онро пешниҳод кардан ғайриимкон аст';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} бояд дар байни ${date(args[0])} ва ${date(args[1])} бошад`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Лутфан нишонаи имейли амалкунандаро ворид намоед.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} бо ${list(args)} ба охир намерасад.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} арзиши иҷозатдодашуда нест.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} бояд ҳадди аққал як аломат бошад.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} бояд аз ${max} аломат камтар ё баробар бошад.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} бояд ${max} аломат бошад.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} бояд аз ${min} аломат зиёд ё баробар бошад.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} бояд дар байни ${min} ва ${max} аломат бошад.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} арзиши иҷозатдодашуда нест.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Зиёда аз ${args[0]} ${name} дошта наметавонад.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} бояд аз ${args[0]} камтар ё баробар бошад.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Ягон формати файл иҷозат дода намешавад.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} бояд чунин намуд бошад: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Камтар аз ${args[0]} ${name} дошта наметавонад.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} бояд ҳадди аққал ${args[0]} бошад.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `\"${value}\" ${name} иҷозат дода намешавад.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} бояд рақам бошад.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} лозим аст.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} бо ${list(args)} оғоз намешавад.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Лутфан URL-и дурустро дохил кунед.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar tg = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$6,\r\n    validation: validation$6\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$5 = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'เพิ่ม',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'เอาออก',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'เอาออกทั้งหมด',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'ขออภัย ข้อมูลบางช่องที่กรอกไม่ถูกต้อง',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'ส่ง',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'ยังไม่ได้เลือกไฟล์',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'เลื่อนขึ้น',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'เลื่อนลง',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'กำลังโหลด...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'โหลดเพิ่มเติม',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'ถัดไป',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'ก่อนหน้า',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'เพิ่มค่าทั้งหมด',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'เพิ่มค่าที่เลือก',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'ลบค่าทั้งหมด',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'ลบค่าที่เลือก',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'เลือกวันที่',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'เปลี่ยนวันที่',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'วันที่ที่เลือกไม่ถูกต้อง',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$5 = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `กรุณายอมรับ ${name}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} จะต้องเป็นวันที่หลังจาก ${date(args[0])}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} จะต้องเป็นวันที่ที่ยังไม่มาถึง`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} สามารถเป็นได้แค่ตัวอักษรเท่านั้น`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} สามารถเป็นได้แค่ตัวอักษรและตัวเลขเท่านั้น`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} สามารถเป็นได้แค่ตัวอักษรและเว้นวรรคเท่านั้น`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} จะต้องเป็นวันที่ที่มาก่อน ${date(args[0])}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} จะต้องเป็นวันที่ที่ผ่านมาแล้ว`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `ช่องนี้ถูกตั้งค่าอย่างไม่ถูกต้อง และจะไม่สามารถส่งข้อมูลได้`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} จะต้องเป็นค่าระหว่าง ${a} และ ${b}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} ไม่ตรงกัน`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} ไม่อยู่ในรูปแบบวันที่ที่ถูกต้อง กรุณากรอกตามรูปแบบ ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'ช่องนี้ถูกตั้งค่าอย่างไม่ถูกต้อง และจะไม่สามารถส่งข้อมูลได้';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} จะต้องเป็นวันที่ระหว่าง ${date(args[0])} และ ${date(args[1])}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'กรุณากรอกที่อยู่อีเมลทีถูกต้อง',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} จะต้องลงท้ายด้วย ${list(args)}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} ไม่ใช่ค่าที่อนุญาตให้กรอก`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} จะต้องมีความยาวอย่างน้อยหนึ่งตัวอักษร`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} จะต้องมีความยาวไม่เกิน ${max} ตัวอักษร`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} ควรจะเป็น ${max} ตัวอักษรยาว`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} จะต้องมีความยาว ${min} ตัวอักษรขึ้นไป`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} จะต้องมีความยาวระหว่าง ${min} และ ${max} ตัวอักษร`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} ไม่ใช่ค่าที่อนุญาตให้กรอก`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `ไม่สามารถเลือกมากกว่า ${args[0]} ${name} ได้`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} จะต้องมีค่าไม่เกิน ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'ไม่มีประเภทของไฟล์ที่อนุญาต';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} จะต้องเป็นไฟล์ประเภท ${args[0]} เท่านั้น`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `ไม่สามารถเลือกน้อยกว่า ${args[0]} ${name} ได้`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} จะต้องมีค่าอย่างน้อย ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” ไม่ใช่ค่า ${name} ที่อนุญาตให้กรอก`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} จะต้องเป็นตัวเลขเท่านั้น`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `กรุณากรอก ${sentence(name)}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} จะต้องเริ่มต้นด้วย ${list(args)}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `กรุณาระบุที่อยู่ลิงก์ให้ถูกต้อง`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar th = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$5,\r\n    validation: validation$5\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$4 = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Ekle',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Kaldır',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Hepsini kaldır',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Maalesef, tüm alanlar doğru doldurulmadı.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Gönder',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Dosya yok',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Yukarı Taşı',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Aşağı taşı',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Yükleniyor...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Daha fazla yükle',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Sonraki',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Önceki',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Tüm değerleri ekle',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Seçili değerleri ekle',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Tüm değerleri kaldır',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Seçili değerleri kaldır',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Tarih seçin',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Tarihi değiştir',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Seçilen tarih geçersiz.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$4 = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Lütfen ${name}'yi kabul edin.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} ${date(args[0])}'den sonra olmalıdır.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} gelecekte bir zaman olmalıdır.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} sadece alfabetik karakterler içerebilir.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} sadece alfabetik karakterler ve sayı içerebilir.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} yalnızca harf ve boşluk içerebilir.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} ${date(args[0])} tarihinden önce olmalı.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} geçmişte olmalı.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Alan yanlış yapılandırılmış ve gönderilemez.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} ${a} ve ${b} aralığında olmalı.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} eşleşmiyor.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} geçerli bir tarih değil, lütfen ${args[0]} biçimini kullanın.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Alan yanlış yapılandırılmış ve gönderilemez.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)}, ${date(args[0])} ve ${date(args[1])} aralığında olmalı.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Lütfen geçerli bir e-mail adresi girin.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} ${list(args)} ile bitmiyor.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} izin verilen bir değer değil.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} en azından bir karakter uzunluğunda olmalı.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} ${max}'e eşit veya daha küçük olmalı.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} ${max} karakter uzunluğunda olmalıdır.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} ${min}'e eşit veya daha büyük olmalı.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)}, ${min} ve ${max} karakter uzunluğu aralığında olmalı.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} izin verilen bir değer değil.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `${name}'in uzunluğu ${args[0]}'dan daha uzun olamaz.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} en azından ${args[0]} uzunluğunda veya ona eşit olmalı.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Hiçbir dosya türüne izin verilmez.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} şu tiplerden biri olmalı: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `${name}'in uzunluğu ${args[0]}'dan daha kısa olamaz.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} en azından ${args[0]} uzunluğunda olmalı.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” ${name} olamaz.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} sayı olmalı.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} gerekli.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} ${list(args)} ile başlamıyor.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Lütfen geçerli bir URL girin.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar tr = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$4,\r\n    validation: validation$4\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$3 = {\r\n    /**\r\n     * Shown on a button for adding additional items.\r\n     */\r\n    add: 'Додати',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Видалити',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Видалити все',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Вибачте, не всі поля заповнені правильно.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Відправити',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Файл не вибрано',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Рухатися вгору',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Пересунути вниз',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Завантаження...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Завантажте більше',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Наступний',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Попередній',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Додати всі значення',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Додати вибрані значення',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Вилучити всі значення',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Вилучити вибрані значення',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Виберіть дату',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Змінити дату',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Вибрана дата недійсна.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$3 = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Будь ласка, прийміть ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `Дата ${sentence(name)} повинна бути пізніше за ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `Дата ${sentence(name)} має бути в майбутньому.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `Поле ${sentence(name)} може містити лише літери.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `Поле ${sentence(name)} може містити лише літери та цифри.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `Поле ${sentence(name)} може містити лише літери та пробіли.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `Дата ${sentence(name)} повинна бути раніше за ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `Дата ${sentence(name)} повинна бути в минулому.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Це поле заповнено неправильно і не може бути надіслано.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `Поле ${sentence(name)} повинно бути між ${a} та ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `Поле ${sentence(name)} не збігається.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `Поле ${sentence(name)} має неправильну дату. Будь ласка, використовуйте формат ${args[0]}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Це поле заповнено неправильно і не може бути надіслано.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `Дата ${sentence(name)} повинна бути між ${date(args[0])} та ${date(args[1])}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Будь ласка, введіть дійсну електронну адресу.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `Поле ${sentence(name)} не повинно закінчуватися на ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `Поле ${sentence(name)} має неприпустиме значення.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `Поле ${sentence(name)} має містити щонайменше один символ.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `Довжина поля ${sentence(name)} повинна бути меншою або дорівнювати ${max} символам.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} має бути довжиною ${max} символів.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `Довжина поля ${sentence(name)} повинна бути більшою або дорівнювати ${min} символам.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `Довжина поля ${sentence(name)} повинна бути між ${min} та ${max} символами.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `Поле ${sentence(name)} має неприпустиме значення.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `Не може бути вибрано більше ніж ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `Поле ${sentence(name)} має бути менше або дорівнювати ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Не вказано дозволені типи файлів.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `Тип файлу в полі ${sentence(name)} має бути: ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `Не може бути вибрано менше ніж ${args[0]} ${name}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `Поле ${sentence(name)} має бути не менше ніж ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `“${value}” не дозволено в полі ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `Поле ${sentence(name)} має бути числом.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `Поле ${sentence(name)} є обов'язковим.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `Поле ${sentence(name)} має починатися з ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Будь ласка, введіть коректну URL-адресу.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar uk = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$3,\r\n    validation: validation$3\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$2 = {\r\n    /**\r\n     * Shown on a button for adding additional items.\r\n     */\r\n    add: \"Qo'shish\",\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: \"O'chirish\",\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: \"Hammasini o'chirish\",\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: \"Kechirasiz, barcha maydonlar to'g'ri to'ldirilmagan.\",\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Yuborish',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Hech qanday fayl tanlanmagan',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Yuqoriga ko’taring',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Pastga siljish',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Yuklanmoqda...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Ko’proq yuklang',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Keyingi',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Oldingi',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: `Barcha qiymatlarni qo'shish`,\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: `Tanlangan qiymatlarni qoʻshish`,\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Barcha qiymatlarni olib tashlang',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Tanlangan qiymatlarni olib tashlash',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Sanani tanlang',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: `O'zgartirish sanasi`,\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Tanlangan sana yaroqsiz.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$2 = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `${name} ni qabul qiling.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} ${date(args[0])} dan keyin bo'lishi kerak.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} kelajakda bo'lishi kerak.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} faqat alifbo tartibidagi belgilardan iborat bo'lishi mumkin.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} faqat harflar va raqamlardan iborat bo'lishi mumkin.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} faqat harf va bo'shliqlardan iborat bo'lishi mumkin.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} ${date(args[0])} dan oldin bo'lishi kerak`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} o'tmishda bo'lishi kerak.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Bu maydon noto'g'ri sozlangan va uni yuborib bo'lmaydi.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} ${a} va ${b} orasida bo'lishi kerak.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} mos emas.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} haqiqiy sana emas, iltimos ${args[0]} formatidan foydalaning`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return \"Bu maydon noto'g'ri sozlangan va uni yuborib bo'lmaydi\";\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} ${date(args[0])} va ${date(args[1])} oralig'ida bo'lishi kerak`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Iltimos amaldagi e-mail manzilingizni kiriting.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} ${list(args)} bilan tugamaydi.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} ruxsat etilgan qiymat emas.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} kamida bitta belgidan iborat bo'lishi kerak.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} ${max} ta belgidan kam yoki teng bo'lishi kerak.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} bo'lishi kerak ${max} belgilar uzun.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} ${min} ta belgidan ko'p yoki teng bo'lishi kerak.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} ${min} va ${max} gacha belgilardan iborat bo'lishi kerak.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} ruxsat etilgan qiymat emas.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `${args[0]} ${name} dan ortiq bo'lishi mumkin emas.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} ${args[0]} dan kichik yoki teng bo'lishi kerak.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Fayl formatlariga ruxsat berilmagan.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} quyidagi turdagi bo'lishi kerak: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `${args[0]} ${name} dan kam bo'lmasligi kerak.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} kamida ${args[0]} bo'lishi kerak.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `\"${value}\" ruxsat berilmagan ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} raqam bo'lishi kerak.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} talab qilinadi.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} ${list(args)} bilan boshlanmaydi.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Iltimos, tegishli URL manzilini kiriting.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar uz = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$2,\r\n    validation: validation$2\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui$1 = {\r\n    /**\r\n     * Shown on buttons for adding new items.\r\n     */\r\n    add: 'Thêm',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: 'Xoá',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: 'Xoá tất cả',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: 'Xin lỗi, không phải tất cả các trường đều được nhập đúng.',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: 'Gửi',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: 'Chưa chọn file',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: 'Di chuyển lên',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: 'Di chuyển xuống',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: 'Đang tải...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: 'Tải thêm',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: 'Tiếp',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: 'Trước',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: 'Thêm tất cả các giá trị',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: 'Thêm các giá trị đã chọn',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: 'Loại bỏ tất cả các giá trị',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: 'Loại bỏ các giá trị đã chọn',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: 'Chọn ngày',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: 'Thay đổi ngày',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: 'Ngày đã chọn không hợp lệ.',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation$1 = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `Hãy đồng ý với ${name}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)} phải sau ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} phải trong tương lai.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)} có thể chỉ bao gồm các chữ cái alphabet.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)} có thể chỉ bao gồm các chữ cái và chữ số.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)} chỉ có thể chứa các chữ cái và khoảng trắng.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)} phải trước ${date(args[0])}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)} phải trong quá khứ.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `Trường này đã được thiết lập sai và không thể gửi.`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)} phải ở giữa ${a} và ${b}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)} không khớp.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)} không phải ngày hợp lệ, hãy sử dụng định dạng ${args[0]}`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return 'Trường này đã được thiết lập sai và không thể gửi.';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)} phải ở giữa khoảng từ ${date(args[0])} đến ${date(args[1])}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: 'Hãy nhập một địa chỉ email hợp lệ.',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} không kết thúc với ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)} không phải một giá trị được cho phép.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)} phải có độ dài tối thiểu một ký tự.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)} phải có độ dài tối đa ${max} ký tự.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)} nên dài ${max} ký tự.`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)} phải có độ dài tối thiểu ${min} ký tự.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)} phải có độ dài tối đa trong khoảng từ ${min} đến ${max} ký tự.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)} không phải một giá trị được cho phép.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `${name} không thể lớn hơn ${args[0]}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${sentence(name)} phải tối đa bằng ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return 'Định dạng tệp tin này không được phép.';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)} phải là một trong các dạng: ${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `${name} không thể nhỏ hơn ${args[0]}.`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)} phải tối thiểu bằng ${args[0]}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `\"${value}\" không phải giá trị ${name} được phép.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)} phải là một số.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)} là bắt buộc.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)} không bắt đầu với ${list(args)}.`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `Vui lòng nhập một URL hợp lệ.`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar vi = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui$1,\r\n    validation: validation$1\r\n});\r\n\r\n/**\r\n * Here we can import additional helper functions to assist in formatting our\r\n * language. Feel free to add additional helper methods to libs/formats if it\r\n * assists in creating good validation messages for your locale.\r\n */\r\n/**\r\n * Standard language for interface features.\r\n * @public\r\n */\r\nconst ui = {\r\n    /**\r\n     * Shown on a button for adding additional items.\r\n     */\r\n    add: '添加',\r\n    /**\r\n     * Shown when a button to remove items is visible.\r\n     */\r\n    remove: '移除',\r\n    /**\r\n     * Shown when there are multiple items to remove at the same time.\r\n     */\r\n    removeAll: '移除全部',\r\n    /**\r\n     * Shown when all fields are not filled out correctly.\r\n     */\r\n    incomplete: '抱歉，部分字段未被正确填写。',\r\n    /**\r\n     * Shown in a button inside a form to submit the form.\r\n     */\r\n    submit: '提交',\r\n    /**\r\n     * Shown when no files are selected.\r\n     */\r\n    noFiles: '未选择文件',\r\n    /**\r\n     * Shown on buttons that move fields up in a list.\r\n     */\r\n    moveUp: '上移',\r\n    /**\r\n     * Shown on buttons that move fields down in a list.\r\n     */\r\n    moveDown: '下移',\r\n    /**\r\n     * Shown when something is actively loading.\r\n     */\r\n    isLoading: '加载中...',\r\n    /**\r\n     * Shown when there is more to load.\r\n     */\r\n    loadMore: '加载更多',\r\n    /**\r\n     * Shown on buttons that navigate state forward\r\n     */\r\n    next: '下一步',\r\n    /**\r\n     * Shown on buttons that navigate state backward\r\n     */\r\n    prev: '以前',\r\n    /**\r\n     * Shown when adding all values.\r\n     */\r\n    addAllValues: '将所有值相加',\r\n    /**\r\n     * Shown when adding selected values.\r\n     */\r\n    addSelectedValues: '添加所选值',\r\n    /**\r\n     * Shown when removing all values.\r\n     */\r\n    removeAllValues: '移除所有值',\r\n    /**\r\n     * Shown when removing selected values.\r\n     */\r\n    removeSelectedValues: '移除所选值',\r\n    /**\r\n     * Shown when there is a date to choose.\r\n     */\r\n    chooseDate: '选择日期',\r\n    /**\r\n     * Shown when there is a date to change.\r\n     */\r\n    changeDate: '更改日期',\r\n    /**\r\n     * Shown when the date is invalid.\r\n     */\r\n    invalidDate: '所选日期无效。',\r\n};\r\n/**\r\n * These are all the possible strings that pertain to validation messages.\r\n * @public\r\n */\r\nconst validation = {\r\n    /**\r\n     * The value is not an accepted value.\r\n     * @see {@link https://formkit.com/essentials/validation#accepted}\r\n     */\r\n    accepted({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid 'accepted' value.\"> */\r\n        return `请接受${name}。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not after\r\n     * @see {@link https://formkit.com/essentials/validation#date-after}\r\n     */\r\n    date_after({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not after the date supplied to the rule.\"> */\r\n            return `${sentence(name)}必须晚于${date(args[0])}。`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not after today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)}必须是未来的日期。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a letter.\r\n     * @see {@link https://formkit.com/essentials/validation#alpha}\r\n     */\r\n    alpha({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical characters.\"> */\r\n        return `${sentence(name)}只能包含英文字母。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not alphanumeric\r\n     * @see {@link https://formkit.com/essentials/validation#alphanumeric}\r\n     */\r\n    alphanumeric({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphanumeric characters.\"> */\r\n        return `${sentence(name)}只能包含字母和数字。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not letter and/or spaces\r\n     * @see {@link https://formkit.com/essentials/validation#alpha-spaces}\r\n     */\r\n    alpha_spaces({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value contains non-alphabetical and non-space characters.\"> */\r\n        return `${sentence(name)}只能包含字母和空格。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The date is not before\r\n     * @see {@link https://formkit.com/essentials/validation#date-before}\r\n     */\r\n    date_before({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date is not before the date supplied to the rule.\"> */\r\n            return `${sentence(name)}必须早于${date(args[0])}。`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided date is not before today's date, since no date was supplied to the rule.\"> */\r\n        return `${sentence(name)}必须是过去的日期。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not between two numbers\r\n     * @see {@link https://formkit.com/essentials/validation#between}\r\n     */\r\n    between({ name, args }) {\r\n        if (isNaN(args[0]) || isNaN(args[1])) {\r\n            /* <i18n case=\"Shown when any of the arguments supplied to the rule were not a number.\"> */\r\n            return `该字段未被正确设置而无法提交。`;\r\n            /* </i18n> */\r\n        }\r\n        const [a, b] = order(args[0], args[1]);\r\n        /* <i18n case=\"Shown when the user-provided value is not between two numbers.\"> */\r\n        return `${sentence(name)}必须在${a}和${b}之间。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The confirmation field does not match\r\n     * @see {@link https://formkit.com/essentials/validation#confirm}\r\n     */\r\n    confirm({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not equal the value of the matched input.\"> */\r\n        return `${sentence(name)}不匹配。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The value is not a valid date\r\n     * @see {@link https://formkit.com/essentials/validation#date-format}\r\n     */\r\n    date_format({ name, args }) {\r\n        if (Array.isArray(args) && args.length) {\r\n            /* <i18n case=\"Shown when the user-provided date does not satisfy the date format supplied to the rule.\"> */\r\n            return `${sentence(name)}不是合法日期，请使用 ${args[0]} 格式`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when no date argument was supplied to the rule.\"> */\r\n        return '该字段未被正确设置而无法提交';\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not within expected date range\r\n     * @see {@link https://formkit.com/essentials/validation#date-between}\r\n     */\r\n    date_between({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided date is not between the start and end dates supplied to the rule. \"> */\r\n        return `${sentence(name)}必须在${date(args[0])}和${date(args[1])}之间`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Shown when the user-provided value is not a valid email address.\r\n     * @see {@link https://formkit.com/essentials/validation#email}\r\n     */\r\n    email: '请输入合法的电子邮件地址。',\r\n    /**\r\n     * Does not end with the specified value\r\n     * @see {@link https://formkit.com/essentials/validation#ends-with}\r\n     */\r\n    ends_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not end with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)}必须以${list(args)}结尾。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#is}\r\n     */\r\n    is({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not one of the values supplied to the rule.\"> */\r\n        return `${sentence(name)}是不允许的。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not match specified length\r\n     * @see {@link https://formkit.com/essentials/validation#length}\r\n     */\r\n    length({ name, args: [first = 0, second = Infinity] }) {\r\n        const min = Number(first) <= Number(second) ? first : second;\r\n        const max = Number(second) >= Number(first) ? second : first;\r\n        if (min == 1 && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is not at least one character.\"> */\r\n            return `${sentence(name)}至少要有一个字符。`;\r\n            /* </i18n> */\r\n        }\r\n        if (min == 0 && max) {\r\n            /* <i18n case=\"Shown when first argument supplied to the rule is 0, and the user-provided value is longer than the max (the 2nd argument) supplied to the rule.\"> */\r\n            return `${sentence(name)}必须少于或等于${max}个字符。`;\r\n            /* </i18n> */\r\n        }\r\n        if (min === max) {\r\n            /* <i18n case=\"Shown when first and second argument supplied to the rule are the same, and the user-provided value is not any of the arguments supplied to the rule.\"> */\r\n            return `${sentence(name)}必须包含${max}个字符。`;\r\n            /* </i18n> */\r\n        }\r\n        if (min && max === Infinity) {\r\n            /* <i18n case=\"Shown when the length of the user-provided value is less than the minimum supplied to the rule and there is no maximum supplied to the rule.\"> */\r\n            return `${sentence(name)}必须多于或等于${min}个字符。`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the length of the user-provided value is between the two lengths supplied to the rule.\"> */\r\n        return `${sentence(name)}必须介于${min}和${max}个字符之间。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Value is not a match\r\n     * @see {@link https://formkit.com/essentials/validation#matches}\r\n     */\r\n    matches({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not match any of the values or RegExp patterns supplied to the rule. \"> */\r\n        return `${sentence(name)}是不允许的。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Exceeds maximum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#max}\r\n     */\r\n    max({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is longer than the max supplied to the rule.\"> */\r\n            return `${name}不得多于${args[0]}个值。`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is greater than the maximum number supplied to the rule.\"> */\r\n        return `${name}不得大于${args[0]}。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * The (field-level) value does not match specified mime type\r\n     * @see {@link https://formkit.com/essentials/validation#mime}\r\n     */\r\n    mime({ name, args }) {\r\n        if (!args[0]) {\r\n            /* <i18n case=\"Shown when no file formats were supplied to the rule.\"> */\r\n            return '没有允许的文件格式。';\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the mime type of user-provided file does not match any mime types supplied to the rule.\"> */\r\n        return `${sentence(name)}的类型必须为：${args[0]}`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not fulfill minimum allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#min}\r\n     */\r\n    min({ name, node: { value }, args }) {\r\n        if (Array.isArray(value)) {\r\n            /* <i18n case=\"Shown when the length of the array of user-provided values is shorter than the min supplied to the rule.\"> */\r\n            return `${name}不得少于${args[0]}个值。`;\r\n            /* </i18n> */\r\n        }\r\n        /* <i18n case=\"Shown when the user-provided value is less than the minimum number supplied to the rule.\"> */\r\n        return `${sentence(name)}不得小于${args[0]}。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not an allowed value\r\n     * @see {@link https://formkit.com/essentials/validation#not}\r\n     */\r\n    not({ name, node: { value } }) {\r\n        /* <i18n case=\"Shown when the user-provided value matches one of the values supplied to (and thus disallowed by) the rule.\"> */\r\n        return `\"${value}\"不是一个合法的${name}。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     *  Is not a number\r\n     * @see {@link https://formkit.com/essentials/validation#number}\r\n     */\r\n    number({ name }) {\r\n        /* <i18n case=\"Shown when the user-provided value is not a number.\"> */\r\n        return `${sentence(name)}必须为数字。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Required field.\r\n     * @see {@link https://formkit.com/essentials/validation#required}\r\n     */\r\n    required({ name }) {\r\n        /* <i18n case=\"Shown when a user does not provide a value to a required input.\"> */\r\n        return `${sentence(name)}不得留空。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Does not start with specified value\r\n     * @see {@link https://formkit.com/essentials/validation#starts-with}\r\n     */\r\n    starts_with({ name, args }) {\r\n        /* <i18n case=\"Shown when the user-provided value does not start with the substring supplied to the rule.\"> */\r\n        return `${sentence(name)}必须以${list(args)}开头。`;\r\n        /* </i18n> */\r\n    },\r\n    /**\r\n     * Is not a url\r\n     * @see {@link https://formkit.com/essentials/validation#url}\r\n     */\r\n    url() {\r\n        /* <i18n case=\"Shown when the user-provided value is not a valid url.\"> */\r\n        return `请输入有效的 URL。`;\r\n        /* </i18n> */\r\n    },\r\n};\r\n\r\nvar zh = /*#__PURE__*/Object.freeze({\r\n    __proto__: null,\r\n    ui: ui,\r\n    validation: validation\r\n});\r\n\r\n/**\r\n * Create a new internationalization plugin for FormKit.\r\n *\r\n * @param registry - The registry of {@link @formkit/i18n#FormKitLocaleRegistry | FormKitLocales}.\r\n *\r\n * @returns {@link @formkit/core#FormKitPlugin | FormKitPlugin}\r\n *\r\n * @public\r\n */\r\nfunction createI18nPlugin(registry) {\r\n    return function i18nPlugin(node) {\r\n        let localeKey = parseLocale(node.config.locale, registry);\r\n        let locale = localeKey ? registry[localeKey] : {};\r\n        /* If the locale prop changes, update the active locale */\r\n        node.on('prop:locale', ({ payload: lang }) => {\r\n            localeKey = parseLocale(lang, registry);\r\n            locale = localeKey ? registry[localeKey] : {};\r\n            // Run through all the messages in the store and update with new locale\r\n            node.store.touch();\r\n        });\r\n        node.on('prop:label', () => node.store.touch());\r\n        node.on('prop:validationLabel', () => node.store.touch());\r\n        /**\r\n         * Hook into the core text or t() hook to perform localization on the\r\n         * output of core functionality.\r\n         */\r\n        node.hook.text((fragment, next) => {\r\n            var _a, _b;\r\n            const key = ((_a = fragment.meta) === null || _a === void 0 ? void 0 : _a.messageKey) || fragment.key;\r\n            if (has(locale, fragment.type) && has(locale[fragment.type], key)) {\r\n                const t = locale[fragment.type][key];\r\n                if (typeof t === 'function') {\r\n                    fragment.value = Array.isArray((_b = fragment.meta) === null || _b === void 0 ? void 0 : _b.i18nArgs)\r\n                        ? t(...fragment.meta.i18nArgs) // eslint-disable-line @typescript-eslint/no-non-null-assertion\r\n                        : t(fragment);\r\n                }\r\n                else {\r\n                    fragment.value = t;\r\n                }\r\n            }\r\n            return next(fragment);\r\n        });\r\n    };\r\n}\r\n/**\r\n * Parse ISO 639-1 and 639-2 to a valid locale key.\r\n *\r\n * @param locale - An ISO 639-1 and (optionally) ISO 639-2 language tag. For these are valid locale keys:\r\n * zh\r\n * zh-CN\r\n * zh-HK\r\n * en\r\n * en-GB\r\n *\r\n * @param availableLocales - An array of locales that may be valid.\r\n *\r\n * @public\r\n */\r\nfunction parseLocale(locale, availableLocales) {\r\n    if (has(availableLocales, locale)) {\r\n        return locale;\r\n    }\r\n    const [lang] = locale.split('-');\r\n    if (has(availableLocales, lang)) {\r\n        return lang;\r\n    }\r\n    for (const locale in availableLocales) {\r\n        return locale;\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * The official FormKit internationalization (i18n) plugin. This package\r\n * contains the locales and the plugin that integrates FormKit with these\r\n * locales. Read the {@link https://formkit.com/essentials/internationalization\r\n * | internationalization documentation} for usage instructions.\r\n *\r\n * @packageDocumentation\r\n */\r\n/**\r\n * Export all the available locales at once.\r\n *\r\n * @public\r\n */\r\nconst locales = {\r\n    ar,\r\n    az,\r\n    bg,\r\n    ca,\r\n    cs,\r\n    da,\r\n    de,\r\n    el,\r\n    en,\r\n    es,\r\n    fa,\r\n    fi,\r\n    fr,\r\n    fy,\r\n    he,\r\n    hr,\r\n    hu,\r\n    id,\r\n    it,\r\n    ja,\r\n    kk,\r\n    ko,\r\n    nb,\r\n    nl,\r\n    pl,\r\n    pt,\r\n    ro,\r\n    ru,\r\n    sk,\r\n    sl,\r\n    sr,\r\n    sv,\r\n    tg,\r\n    th,\r\n    tr,\r\n    uk,\r\n    uz,\r\n    vi,\r\n    zh,\r\n};\r\n\r\nexport { ar, az, bg, ca, createI18nPlugin, cs, da, date, de, el, en, es, fa, fi, fr, fy, he, hr, hu, id, it, ja, kk, ko, list, locales, nb, nl, order, pl, pt, ro, ru, sentence, sk, sl, sr, sv, tg, th, tr, uk, uz, vi, zh };\r\n"],
  "mappings": "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",
  "names": ["date", "locale"]
}
